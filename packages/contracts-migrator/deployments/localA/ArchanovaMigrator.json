{
  "address": "0x0c68aBae9eCfFbb683DcaaEf36F393804FEEE750",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "archanovaAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "etherspotAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "BalanceTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "archanovaAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "etherspotAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        }
      ],
      "name": "ENSNodeTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "archanovaAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "etherspotAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "ERC20TokenTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ensController",
      "outputs": [
        {
          "internalType": "contract ENSController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensRegistry",
      "outputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ENSController",
          "name": "ensController_",
          "type": "address"
        },
        {
          "internalType": "contract ENSRegistry",
          "name": "ensRegistry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "archanovaAccount",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "etherspotAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "archanovaAccountDeviceSignature",
          "type": "bytes"
        }
      ],
      "name": "transferBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "archanovaAccount",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "etherspotAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "archanovaAccountDeviceSignature",
          "type": "bytes"
        }
      ],
      "name": "transferBalanceAndENSNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "archanovaAccount",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "etherspotAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "archanovaAccountDeviceSignature",
          "type": "bytes"
        }
      ],
      "name": "transferBalanceAndERC20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "archanovaAccount",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "etherspotAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "archanovaAccountDeviceSignature",
          "type": "bytes"
        }
      ],
      "name": "transferBalanceAndERC20TokensAndENSNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "archanovaAccount",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "etherspotAccount",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "archanovaAccountDeviceSignature",
          "type": "bytes"
        }
      ],
      "name": "transferENSNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "archanovaAccount",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "etherspotAccount",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "archanovaAccountDeviceSignature",
          "type": "bytes"
        }
      ],
      "name": "transferERC20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "archanovaAccount",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "etherspotAccount",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "ensNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "archanovaAccountDeviceSignature",
          "type": "bytes"
        }
      ],
      "name": "transferERC20TokensAndENSNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x627783b752528a05332c47d92c23a143556edc2392485ff760548e5811d853ae",
  "receipt": {
    "to": null,
    "from": "0x61f6dFAca3de098fB895A83197C59bC50a8AB39e",
    "contractAddress": "0x0c68aBae9eCfFbb683DcaaEf36F393804FEEE750",
    "transactionIndex": 0,
    "gasUsed": "2197818",
    "logsBloom": "0x
    "blockHash": "0xb2e2c12cfb3f2d605a0c0b02f7e2da097f5eb7456a5d674faa5c06be24a40789",
    "transactionHash": "0x627783b752528a05332c47d92c23a143556edc2392485ff760548e5811d853ae",
    "logs": [],
    "blockNumber": 30,
    "cumulativeGasUsed": "2197818",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d5663e34551543292b6282366bdf6962",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BalanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"}],\"name\":\"ENSNodeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ensController\",\"outputs\":[{\"internalType\":\"contract ENSController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENSController\",\"name\":\"ensController_\",\"type\":\"address\"},{\"internalType\":\"contract ENSRegistry\",\"name\":\"ensRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalanceAndENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalanceAndERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferBalanceAndERC20TokensAndENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"archanovaAccount\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"etherspotAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"archanovaAccountDeviceSignature\",\"type\":\"bytes\"}],\"name\":\"transferERC20TokensAndENSNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"public constructor\"},\"initialize(address,address)\":{\"params\":{\"ensController_\":\"ens controller address\",\"ensRegistry_\":\"ens registry address\"}},\"isInitialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}}},\"title\":\"Archanova migrator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address)\":{\"notice\":\"Initializes `ArchanovaMigrator` contract\"},\"isInitialized()\":{\"notice\":\"Check if contract is initialized\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ArchanovaMigrator.sol\":\"ArchanovaMigrator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@etherspot/contracts/src/common/access/Guarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n\\n/**\\n * @title Guarded\\n *\\n * @dev Contract module which provides a guardian-type control mechanism.\\n * It allows key accounts to have guardians and restricts specific methods to be accessible by guardians only.\\n *\\n * Each guardian account can remove other guardians\\n *\\n * Use `_initializeGuarded` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Guarded {\\n  using SignatureLib for bytes32;\\n\\n  mapping(address => bool) private guardians;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when a new guardian is added\\n   * @param sender sender address\\n   * @param guardian guardian address\\n   */\\n  event GuardianAdded(\\n    address sender,\\n    address guardian\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing guardian is removed\\n   * @param sender sender address\\n   * @param guardian guardian address\\n   */\\n  event GuardianRemoved(\\n    address sender,\\n    address guardian\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not a guardian account\\n   */\\n  modifier onlyGuardian() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      guardians[tx.origin],\\n      \\\"Guarded: tx.origin is not the guardian\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Adds a new guardian\\n   * @param guardian guardian address\\n   */\\n  function addGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    _addGuardian(guardian);\\n  }\\n\\n  /**\\n   * @notice Removes the existing guardian\\n   * @param guardian guardian address\\n   */\\n  function removeGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin != guardian,\\n      \\\"Guarded: cannot remove self\\\"\\n    );\\n\\n    require(\\n      guardians[guardian],\\n      \\\"Guarded: guardian doesn't exist\\\"\\n    );\\n\\n    guardians[guardian] = false;\\n\\n    emit GuardianRemoved(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin,\\n      guardian\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Check if guardian exists\\n   * @param guardian guardian address\\n   * @return true when guardian exists\\n   */\\n  function isGuardian(\\n    address guardian\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return guardians[guardian];\\n  }\\n\\n  /**\\n   * @notice Verifies guardian signature\\n   * @param messageHash message hash\\n   * @param signature signature\\n   * @return true on correct guardian signature\\n   */\\n  function verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes calldata signature\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _verifyGuardianSignature(\\n      messageHash,\\n      signature\\n    );\\n  }\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `Guarded` contract\\n   * @dev If `guardians_` array is empty `tx.origin` is added as guardian account\\n   * @param guardians_ array of guardians addresses\\n   */\\n  function _initializeGuarded(\\n    address[] memory guardians_\\n  )\\n    internal\\n  {\\n    if (guardians_.length == 0) {\\n      // solhint-disable-next-line avoid-tx-origin\\n      _addGuardian(tx.origin);\\n    } else {\\n      uint guardiansLen = guardians_.length;\\n      for (uint i = 0; i < guardiansLen; i++) {\\n        _addGuardian(guardians_[i]);\\n      }\\n    }\\n  }\\n\\n\\n  // internal functions (views)\\n\\n  function _verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    address guardian = messageHash.recoverAddress(signature);\\n\\n    return guardians[guardian];\\n  }\\n\\n  // private functions\\n\\n  function _addGuardian(\\n    address guardian\\n  )\\n    private\\n  {\\n    require(\\n      guardian != address(0),\\n      \\\"Guarded: cannot add 0x0 guardian\\\"\\n    );\\n\\n    require(\\n      !guardians[guardian],\\n      \\\"Guarded: guardian already exists\\\"\\n    );\\n\\n    guardians[guardian] = true;\\n\\n    emit GuardianAdded(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin,\\n      guardian\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x8f2e314e77e258f9ff75a55f031472ece62af57c60dbd718463d961282f7bd65\",\"license\":\"MIT\"},\"@etherspot/contracts/src/common/libs/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Bytes library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nlibrary BytesLib {\\n  /**\\n   * @notice Converts bytes to address\\n   * @param data data\\n   * @return address\\n   */\\n  function toAddress(\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result;\\n\\n    require(\\n      data.length == 20,\\n      \\\"BytesLib: invalid data length\\\"\\n    );\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := div(mload(add(data, 0x20)), 0x1000000000000000000000000)\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x64c84964ea91bfb1f2d859eea6c57fe5b4a6f269951a4adf5f58d306c54c7f76\",\"license\":\"MIT\"},\"@etherspot/contracts/src/common/libs/SafeMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Safe math library\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/math/SafeMath.sol\\n */\\nlibrary SafeMathLib {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n\\n    require(c >= a, \\\"SafeMathLib: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMathLib: subtraction overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n\\n    return a - b;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n\\n    require(c / a == b, \\\"SafeMathLib: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMathLib: division by zero\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n\\n    return a / b;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMathLib: modulo by zero\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x6089f354ca754d9c5dd9e800ee5ed86717dbf8f9af470604e0be691ac57c0107\",\"license\":\"MIT\"},\"@etherspot/contracts/src/common/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Signature library\\n *\\n * @dev Based on\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/cryptography/ECDSA.sol#L26\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/utils/Strings.sol#L12\\n */\\nlibrary SignatureLib {\\n  function recoverAddress(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n\\n      if (v < 27) {\\n        v += 27;\\n      }\\n\\n      if (v == 27 || v == 28) {\\n        result = ecrecover(messageHash, v, r, s);\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function toEthereumSignedMessageHash(\\n    bytes memory message\\n  )\\n    internal\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n      _uintToString(message.length),\\n      abi.encodePacked(message)\\n    ));\\n  }\\n\\n  function _uintToString(\\n    uint num\\n  )\\n    private\\n    pure\\n    returns (string memory)\\n  {\\n    if (num == 0) {\\n      return \\\"0\\\";\\n    } else if (num == 32) {\\n      return \\\"32\\\";\\n    }\\n\\n    uint i = num;\\n    uint j = num;\\n\\n    uint len;\\n\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n\\n    bytes memory result = new bytes(len);\\n\\n    uint k = len - 1;\\n\\n    while (i != 0) {\\n      result[k--] = byte(uint8(48 + i % 10));\\n      i /= 10;\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\",\"keccak256\":\"0x142d97534c2f5a8d69c4a1e1d1e83fc268beb36dc7ce65335aebfc4f81c71531\",\"license\":\"MIT\"},\"@etherspot/contracts/src/common/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Contract module which provides access control mechanism, where\\n * there is the initializer account that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initializer account will be tx.origin during contract deployment and will be removed on first use.\\n * Use `onlyInitializer` modifier on contract initialize process.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted after `onlyInitializer`\\n   * @param initializer initializer address\\n   */\\n  event Initialized(\\n    address initializer\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin == initializer,\\n      \\\"Initializable: tx.origin is not the initializer\\\"\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    initializer = tx.origin;\\n  }\\n\\n   // external functions (views)\\n\\n  /**\\n   * @notice Check if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function isInitialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x3d47b2864dde5bde245917f7ac416a9e9715cdf1d226897e49838eb3186ee067\",\"license\":\"MIT\"},\"@etherspot/contracts/src/common/token/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../libs/SafeMathLib.sol\\\";\\n\\n\\n/**\\n * @title ERC20 token\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/token/ERC20/ERC20.sol\\n */\\ncontract ERC20Token {\\n  using SafeMathLib for uint256;\\n\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n  uint256 public totalSupply;\\n\\n  mapping(address => uint256) internal balances;\\n  mapping(address => mapping(address => uint256)) internal allowances;\\n\\n  // events\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // external functions\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool)\\n  {\\n    _transfer(_getSender(), to, value);\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    virtual\\n    external\\n    returns (bool)\\n  {\\n    address sender = _getSender();\\n\\n    _transfer(from, to, value);\\n    _approve(from, sender, allowances[from][sender].sub(value));\\n\\n    return true;\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    virtual\\n    external\\n    returns (bool)\\n  {\\n    _approve(_getSender(), spender, value);\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    virtual\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return balances[owner];\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    virtual\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return allowances[owner][spender];\\n  }\\n\\n  // internal functions\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      from != address(0),\\n      \\\"ERC20Token: cannot transfer from 0x0 address\\\"\\n    );\\n    require(\\n      to != address(0),\\n      \\\"ERC20Token: cannot transfer to 0x0 address\\\"\\n    );\\n\\n    balances[from] = balances[from].sub(value);\\n    balances[to] = balances[to].add(value);\\n\\n    emit Transfer(from, to, value);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot approve from 0x0 address\\\"\\n    );\\n    require(\\n      spender != address(0),\\n      \\\"ERC20Token: cannot approve to 0x0 address\\\"\\n    );\\n\\n    allowances[owner][spender] = value;\\n\\n    emit Approval(owner, spender, value);\\n  }\\n\\n  function _mint(\\n    address owner,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot mint to 0x0 address\\\"\\n    );\\n    require(\\n      value > 0,\\n      \\\"ERC20Token: cannot mint 0 value\\\"\\n    );\\n\\n    balances[owner] = balances[owner].add(value);\\n    totalSupply = totalSupply.add(value);\\n\\n    emit Transfer(address(0), owner, value);\\n  }\\n\\n  function _burn(\\n    address owner,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot burn from 0x0 address\\\"\\n    );\\n\\n    balances[owner] = balances[owner].sub(\\n      value,\\n      \\\"ERC20Token: burn value exceeds balance\\\"\\n    );\\n\\n    totalSupply = totalSupply.sub(value);\\n\\n    emit Transfer(owner, address(0), value);\\n  }\\n\\n  // internal functions (views)\\n\\n  function _getSender()\\n    virtual\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return msg.sender;\\n  }\\n}\\n\",\"keccak256\":\"0x6f2b0bd08da549c6c1f5ceee85766832d587dde62c56bebc3a14bd9ea407e03d\",\"license\":\"MIT\"},\"@etherspot/contracts/src/common/typedData/TypedDataContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Typed data container\\n *\\n * @dev EIP-712 is used across whole repository.\\n *\\n * Use `_initializeTypedDataContainer` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract TypedDataContainer {\\n  string private constant TYPED_DATA_PREFIX = \\\"\\\\x19\\\\x01\\\";\\n  bytes32 private constant TYPED_DATA_DOMAIN_TYPE_HASH = keccak256(\\n    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n  );\\n\\n  bytes32 public typedDataDomainSeparator;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `TypedDataContainer` contract\\n   * @param domainNameHash hash of a domain name\\n   * @param domainVersionHash hash of a domain version\\n   * @param domainSalt domain salt\\n   */\\n  function _initializeTypedDataContainer(\\n    bytes32 domainNameHash,\\n    bytes32 domainVersionHash,\\n    bytes32 domainSalt\\n  )\\n    internal\\n  {\\n    uint256 chainId;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    typedDataDomainSeparator = keccak256(abi.encode(\\n        TYPED_DATA_DOMAIN_TYPE_HASH,\\n        domainNameHash,\\n        domainVersionHash,\\n        chainId,\\n        address(this),\\n        domainSalt\\n    ));\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Hashes primary typed data\\n   * @param dataHash hash of the data\\n   */\\n  function _hashPrimaryTypedData(\\n    bytes32 dataHash\\n  )\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      TYPED_DATA_PREFIX,\\n      typedDataDomainSeparator,\\n      dataHash\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x31acc326983ec008dae87c208b9afc0eb2d41cf236cc4b64d0cbad98a3969c3d\",\"license\":\"MIT\"},\"@etherspot/contracts/src/ens/ENSController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/access/Guarded.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/typedData/TypedDataContainer.sol\\\";\\nimport \\\"../gateway/GatewayRecipient.sol\\\";\\nimport \\\"./ENSRegistry.sol\\\";\\n\\n\\n/**\\n * @title ENS controller\\n *\\n * @notice ENS subnode registrar\\n *\\n * @dev The process of adding root node consists of 3 steps:\\n * 1. `submitNode` - should be called from ENS node owner,\\n * 2. Change ENS node owner in ENS registry to ENS controller,\\n * 3. `verifyNode` - should be called from previous ENS node owner,\\n *\\n * To register sub node, `msg.sender` need to send valid signature from one of guardian key.\\n * Once registration is complete `msg.sender` becoming both node owner and `addr` record value.\\n *\\n * After registration sub node cannot be replaced.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract ENSController is Guarded, Initializable, TypedDataContainer, GatewayRecipient {\\n  struct Node {\\n    address addr;\\n    address owner;\\n  }\\n\\n  struct SubNodeRegistration {\\n    address account;\\n    bytes32 node;\\n    bytes32 label;\\n  }\\n\\n  bytes32 private constant SUB_NODE_REGISTRATION_TYPE_HASH = keccak256(\\n    \\\"SubNodeRegistration(address account,bytes32 node,bytes32 label)\\\"\\n  );\\n\\n  ENSRegistry public registry;\\n\\n  mapping(bytes32 => Node) private nodes;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the address field in node resolver is changed\\n   * @param node node name hash\\n   * @param addr new address\\n   */\\n  event AddrChanged(\\n    bytes32 indexed node,\\n    address addr\\n  );\\n\\n  /**\\n   * @dev Emitted when new node is submitted\\n   * @param node node name hash\\n   * @param owner owner address\\n   */\\n  event NodeSubmitted(\\n    bytes32 node,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing owner is verified\\n   * @param node node name hash\\n   */\\n  event NodeVerified(\\n    bytes32 node\\n  );\\n\\n  /**\\n   * @dev Emitted when new node is released\\n   * @param node node name hash\\n   * @param owner owner address\\n   */\\n  event NodeReleased(\\n    bytes32 node,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when ENS registry address is changed\\n   * @param registry registry address\\n   */\\n  event RegistryChanged(\\n    address registry\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Guarded() Initializable() {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initializes `ENSController` contract\\n   * @param registry_ ENS registry address\\n   * @param gateway_ gateway address\\n   * @param typedDataDomainNameHash hash of a typed data domain name\\n   * @param typedDataDomainVersionHash hash of a typed data domain version\\n   * @param typedDataDomainSalt typed data salt\\n   */\\n  function initialize(\\n    ENSRegistry registry_,\\n    address[] calldata guardians_,\\n    address gateway_,\\n    bytes32 typedDataDomainNameHash,\\n    bytes32 typedDataDomainVersionHash,\\n    bytes32 typedDataDomainSalt\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    require(\\n      address(registry_) != address(0),\\n      \\\"ENSController: cannot set 0x0 registry\\\"\\n    );\\n\\n    registry = registry_;\\n\\n    // Guarded\\n    _initializeGuarded(guardians_);\\n\\n    // GatewayRecipient\\n    _initializeGatewayRecipient(gateway_);\\n\\n    // TypedDataContainer\\n    _initializeTypedDataContainer(\\n      typedDataDomainNameHash,\\n      typedDataDomainVersionHash,\\n      typedDataDomainSalt\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets registry\\n   * @param registry_ registry address\\n   */\\n  function setRegistry(\\n    ENSRegistry registry_\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      address(registry_) != address(0),\\n      \\\"ENSController: cannot set 0x0 registry\\\"\\n    );\\n\\n    require(\\n      registry_ != registry,\\n      \\\"ENSController: registry already set\\\"\\n    );\\n\\n    registry = registry_;\\n\\n    emit RegistryChanged(\\n      address(registry)\\n    );\\n  }\\n\\n  /**\\n   * @notice Submits node\\n   * @dev Should be called from the current ENS node owner\\n   * @param node node name hash\\n   */\\n  function submitNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      nodes[node].addr == address(0),\\n      \\\"ENSController: node already exists\\\"\\n    );\\n\\n    require(\\n      nodes[node].owner == address(0),\\n      \\\"ENSController: node already submitted\\\"\\n    );\\n\\n    require(\\n      registry.owner(node) == owner,\\n      \\\"ENSController: invalid ens node owner\\\"\\n    );\\n\\n    nodes[node].owner = owner;\\n\\n    emit NodeSubmitted(node, owner);\\n  }\\n\\n  /**\\n   * @notice Verifies node\\n   * @dev Should be called from the previous ENS node owner\\n   * @param node node name hash\\n   */\\n  function verifyNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      nodes[node].addr == address(0),\\n      \\\"ENSController: node already exists\\\"\\n    );\\n\\n    require(\\n      nodes[node].owner == owner,\\n      \\\"ENSController: invalid node owner\\\"\\n    );\\n\\n    require(\\n      registry.owner(node) == address(this),\\n      \\\"ENSController: invalid ens node owner\\\"\\n    );\\n\\n    nodes[node].addr = address(this);\\n\\n    registry.setResolver(node, address(this));\\n\\n    emit NodeVerified(node);\\n  }\\n\\n  /**\\n   * @notice Releases node\\n   * @dev Should be called from the previous ENS node owner\\n   * @param node node name hash\\n   */\\n  function releaseNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      nodes[node].addr == address(this),\\n      \\\"ENSController: node doesn't exist\\\"\\n    );\\n\\n    require(\\n      nodes[node].owner == owner,\\n      \\\"ENSController: invalid node owner\\\"\\n    );\\n\\n    registry.setOwner(node, owner);\\n\\n    delete nodes[node].addr;\\n    delete nodes[node].owner;\\n\\n    emit NodeReleased(node, owner);\\n  }\\n\\n  /**\\n   * @notice Sets address\\n   * @dev Used in address resolver\\n   * @param node node name hash\\n   * @param addr address\\n   */\\n  function setAddr(\\n    bytes32 node,\\n    address addr\\n  )\\n    external\\n  {\\n    require(\\n      nodes[node].addr == _getContextAccount(),\\n      \\\"ENSController: caller is not the node owner\\\"\\n    );\\n\\n    nodes[node].addr = addr;\\n\\n    emit AddrChanged(node, addr);\\n  }\\n\\n  /**\\n   * @notice Sync address\\n   * @param node node name hash\\n   */\\n  function syncAddr(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address account = _getContextAccount();\\n\\n    require(\\n      account == registry.owner(node),\\n      \\\"ENSController: caller is not the node owner\\\"\\n    );\\n\\n    require(\\n      registry.resolver(node) == address(this),\\n      \\\"ENSController: invalid node resolver\\\"\\n    );\\n\\n    require(\\n      nodes[node].addr == address(0),\\n      \\\"ENSController: node already in sync\\\"\\n    );\\n\\n    nodes[node].addr = account;\\n\\n    emit AddrChanged(node, account);\\n  }\\n\\n  /**\\n   * @notice Registers sub node\\n   * @param node node name hash\\n   * @param label label hash\\n   * @param guardianSignature guardian signature\\n   */\\n  function registerSubNode(\\n    bytes32 node,\\n    bytes32 label,\\n    bytes calldata guardianSignature\\n  )\\n    external\\n  {\\n    address account = _getContextAccount();\\n\\n    bytes32 messageHash = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        account,\\n        node,\\n        label\\n      )\\n    );\\n\\n    require(\\n      _verifyGuardianSignature(messageHash, guardianSignature),\\n      \\\"ENSController: invalid guardian signature\\\"\\n    );\\n\\n    bytes32 subNode = keccak256(\\n      abi.encodePacked(\\n        node,\\n        label\\n      )\\n    );\\n\\n    require(\\n      nodes[node].addr == address(this),\\n      \\\"ENSController: invalid node\\\"\\n    );\\n\\n    require(\\n      nodes[subNode].addr == address(0),\\n      \\\"ENSController: label already taken\\\"\\n    );\\n\\n    nodes[subNode].addr = account;\\n\\n    registry.setSubnodeOwner(node, label, address(this));\\n    registry.setResolver(subNode, address(this));\\n    registry.setOwner(subNode, account);\\n\\n    emit AddrChanged(subNode, account);\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Gets address\\n   * @dev Used in address resolver\\n   * @param node node name hash\\n   * @return node address\\n   */\\n  function addr(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return nodes[node].addr;\\n  }\\n  /**\\n   * @notice Gets node\\n   * @param node node name hash\\n   */\\n  function getNode(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address nodeAddr, address nodeOwner)\\n  {\\n    return (nodes[node].addr, nodes[node].owner);\\n  }\\n\\n  // external functions (pure)\\n\\n  /**\\n   * @notice Checks if contract supports interface\\n   * @param interfaceID method signature\\n   * @return true when contract supports interface\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceID\\n  )\\n    external\\n    pure\\n    returns (bool)\\n  {\\n    return (\\n      /// @dev bytes4(keccak256('supportsInterface(bytes4)'));\\n      interfaceID == 0x01ffc9a7 ||\\n      /// @dev bytes4(keccak256('addr(bytes32)'));\\n      interfaceID == 0x3b3b57de\\n    );\\n  }\\n\\n  // public functions (views)\\n\\n  /**\\n   * @notice Hashes `SubNodeRegistration` typed data\\n   * @param subNodeRegistration struct\\n   * @return hash\\n   */\\n  function hashSubNodeRegistration(\\n    SubNodeRegistration memory subNodeRegistration\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        subNodeRegistration.account,\\n        subNodeRegistration.node,\\n        subNodeRegistration.label\\n      )\\n    );\\n  }\\n\\n  // private functions (pure)\\n\\n  function _hashTypedData(\\n    address account,\\n    bytes32 node,\\n    bytes32 label\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encode(\\n      SUB_NODE_REGISTRATION_TYPE_HASH,\\n      account,\\n      node,\\n      label\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x3efde23c967a7cc7c7d047feb367cf58f42d30596c6640cb075437ea74a051ba\",\"license\":\"MIT\"},\"@etherspot/contracts/src/ens/ENSRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ENS registry\\n *\\n * @dev Base on https://github.com/ensdomains/ens/blob/v0.2.2/contracts/ENSRegistry.sol\\n */\\ncontract ENSRegistry {\\n  struct Record {\\n    address owner;\\n    address resolver;\\n    uint64 ttl;\\n  }\\n\\n  mapping(bytes32 => Record) private records;\\n\\n  // events\\n\\n  event NewOwner(\\n    bytes32 indexed node,\\n    bytes32 indexed label,\\n    address owner\\n  );\\n\\n  event Transfer(\\n    bytes32 indexed node,\\n    address owner\\n  );\\n\\n  event NewResolver(\\n    bytes32 indexed node,\\n    address resolver\\n  );\\n\\n  event NewTTL(\\n    bytes32 indexed node,\\n    uint64 ttl\\n  );\\n\\n  // modifiers\\n\\n  modifier onlyNodeOwner(\\n    bytes32 node\\n  ) {\\n    require(\\n      records[node].owner == msg.sender,\\n      \\\"ENSRegistry: msg.sender is not the node owner\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev public constructor\\n   */\\n  constructor()\\n    public\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    records[0x0].owner = tx.origin;\\n  }\\n\\n  // external functions\\n\\n  function setOwner(\\n    bytes32 node,\\n    address owner\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].owner = owner;\\n\\n    emit Transfer(node, owner);\\n  }\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    bytes32 subNode = keccak256(\\n      abi.encodePacked(\\n        node,\\n        label\\n      )\\n    );\\n\\n    records[subNode].owner = owner;\\n\\n    emit NewOwner(node, label, owner);\\n  }\\n\\n  function setResolver(\\n    bytes32 node,\\n    address resolver\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].resolver = resolver;\\n\\n    emit NewResolver(node, resolver);\\n  }\\n\\n  function setTTL(\\n    bytes32 node,\\n    uint64 ttl\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].ttl = ttl;\\n\\n    emit NewTTL(node, ttl);\\n  }\\n\\n  // external functions (views)\\n\\n  function owner(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return records[node].owner;\\n  }\\n\\n  function resolver(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return records[node].resolver;\\n  }\\n\\n  function ttl(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (uint64)\\n  {\\n    return records[node].ttl;\\n  }\\n}\\n\",\"keccak256\":\"0xc76da69836cf4607b45cb1ca879bc557d762415fa9b4f535239d344ae5395514\",\"license\":\"MIT\"},\"@etherspot/contracts/src/gateway/GatewayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/libs/BytesLib.sol\\\";\\n\\n\\n/**\\n * @title Gateway recipient\\n *\\n * @notice Gateway target contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract GatewayRecipient {\\n  using BytesLib for bytes;\\n\\n  address public gateway;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `GatewayRecipient` contract\\n   * @param gateway_ `Gateway` contract address\\n   */\\n  function _initializeGatewayRecipient(\\n    address gateway_\\n  )\\n    internal\\n  {\\n    gateway = gateway_;\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Gets gateway context account\\n   * @return context account address\\n   */\\n  function _getContextAccount()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(40);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context sender\\n   * @return context sender address\\n   */\\n  function _getContextSender()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(20);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context data\\n   * @return context data\\n   */\\n  function _getContextData()\\n    internal\\n    view\\n    returns (bytes calldata)\\n  {\\n    bytes calldata result;\\n\\n    if (_isGatewaySender()) {\\n      result = msg.data[:msg.data.length - 40];\\n    } else {\\n      result = msg.data;\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions (views)\\n\\n  function _getContextAddress(\\n    uint256 offset\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (_isGatewaySender()) {\\n      uint from = msg.data.length - offset;\\n      result = bytes(msg.data[from:from + 20]).toAddress();\\n    } else {\\n      result = msg.sender;\\n    }\\n\\n    return result;\\n  }\\n\\n  function _isGatewaySender()\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (msg.sender == gateway) {\\n      require(\\n        msg.data.length >= 44,\\n        \\\"GatewayRecipient: invalid msg.data\\\"\\n      );\\n\\n      result = true;\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe3fd29479d748d67360c61a9cbaafc66eaca25f476e59a45e842472bcf5233fc\",\"license\":\"MIT\"},\"src/ArchanovaAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Archanova account\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nabstract contract ArchanovaAccount {\\n  struct Device {\\n    bool isOwner;\\n    bool exists;\\n    bool existed;\\n  }\\n\\n  mapping(address => Device) public devices;\\n\\n  // events\\n\\n  event DeviceAdded(\\n    address device,\\n    bool isOwner\\n  );\\n\\n  event DeviceRemoved(\\n    address device\\n  );\\n\\n  event TransactionExecuted(\\n    address recipient,\\n    uint256 value,\\n    bytes data,\\n    bytes response\\n  );\\n\\n  // external functions\\n\\n  function addDevice(\\n    address device,\\n    bool isOwner\\n  )\\n    virtual\\n    external;\\n\\n  function removeDevice(\\n    address device\\n  )\\n    virtual\\n    external;\\n\\n  function executeTransaction(\\n    address payable recipient,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    virtual\\n    external\\n    returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf01215cb33944add89f3da8cea04053bf248ace52a0f07bb6d7356da81624bce\",\"license\":\"MIT\"},\"src/ArchanovaMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@etherspot/contracts/src/common/libs/SignatureLib.sol\\\";\\nimport \\\"@etherspot/contracts/src/common/lifecycle/Initializable.sol\\\";\\nimport \\\"@etherspot/contracts/src/common/token/ERC20Token.sol\\\";\\nimport \\\"@etherspot/contracts/src/ens/ENSController.sol\\\";\\nimport \\\"@etherspot/contracts/src/ens/ENSRegistry.sol\\\";\\nimport \\\"./ArchanovaAccount.sol\\\";\\n\\n\\n/**\\n * @title Archanova migrator\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract ArchanovaMigrator is Initializable {\\n  using SignatureLib for bytes32;\\n\\n  bytes32 constant private MIGRATION_MESSAGE_PREFIX = keccak256(abi.encodePacked(\\\"etherspot <> archanova migration\\\"));\\n\\n  ENSController public ensController;\\n  ENSRegistry public ensRegistry;\\n\\n  uint256 private chainId;\\n\\n  // events\\n\\n  event BalanceTransferred(\\n    address archanovaAccount,\\n    address etherspotAccount,\\n    uint256 value\\n  );\\n\\n  event ERC20TokenTransferred(\\n    address archanovaAccount,\\n    address etherspotAccount,\\n    address token,\\n    uint256 tokenAmount\\n  );\\n\\n  event ENSNodeTransferred(\\n    address archanovaAccount,\\n    address etherspotAccount,\\n    bytes32 ensNode\\n  );\\n\\n\\n  /**\\n   * @dev public constructor\\n   */\\n  constructor()\\n    public\\n    Initializable()\\n  {\\n    uint chainId_;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId_ := chainid()\\n    }\\n\\n    chainId = chainId_;\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initializes `ArchanovaMigrator` contract\\n   * @param ensController_ ens controller address\\n   * @param ensRegistry_ ens registry address\\n   */\\n  function initialize(\\n    ENSController ensController_,\\n    ENSRegistry ensRegistry_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    ensController = ensController_;\\n    ensRegistry = ensRegistry_;\\n  }\\n\\n  function transferBalance(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n  }\\n\\n  function transferERC20Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] calldata tokens,\\n    uint256[] calldata tokensAmounts,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      tokens,\\n      tokensAmounts\\n    );\\n  }\\n\\n  function transferBalanceAndERC20Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    address[] calldata tokens,\\n    uint256[] calldata tokensAmounts,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      tokens,\\n      tokensAmounts\\n    );\\n  }\\n\\n  function transferENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  function transferBalanceAndENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  function transferERC20TokensAndENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] calldata tokens,\\n    uint256[] calldata tokensAmounts,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      tokens,\\n      tokensAmounts\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  function transferBalanceAndERC20TokensAndENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value,\\n    address[] calldata tokens,\\n    uint256[] calldata tokensAmounts,\\n    bytes32 ensNode,\\n    bytes calldata archanovaAccountDeviceSignature\\n  )\\n    external\\n  {\\n    _verifyArchanovaAccountOwner(\\n      archanovaAccount,\\n      etherspotAccount,\\n      archanovaAccountDeviceSignature\\n    );\\n\\n    _transferBalance(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n\\n    _transferERC20Tokens(\\n      archanovaAccount,\\n      etherspotAccount,\\n      tokens,\\n      tokensAmounts\\n    );\\n\\n    _transferENSNode(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  // private functions\\n\\n  function _transferBalance(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    uint256 value\\n  )\\n    private\\n  {\\n    ArchanovaAccount(archanovaAccount).executeTransaction(\\n      etherspotAccount,\\n      value,\\n      new bytes(0)\\n    );\\n\\n    emit BalanceTransferred(\\n      archanovaAccount,\\n      etherspotAccount,\\n      value\\n    );\\n  }\\n\\n  function _transferERC20Tokens(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    address[] memory tokens,\\n    uint256[] memory tokensAmounts\\n  )\\n    private\\n  {\\n    uint tokensLen = tokens.length;\\n\\n    for (uint i = 0; i < tokensLen; i++) {\\n      bytes memory response = ArchanovaAccount(archanovaAccount).executeTransaction(\\n        payable(tokens[i]),\\n        0,\\n        abi.encodeWithSelector(\\n          ERC20Token(tokens[i]).transfer.selector,\\n          etherspotAccount,\\n          tokensAmounts[i]\\n        )\\n      );\\n\\n      if (response.length > 0) {\\n        require(\\n          abi.decode(response, (bool)),\\n          \\\"ArchanovaMigrator: ERC20Token transfer reverted\\\"\\n        );\\n      }\\n\\n      emit ERC20TokenTransferred(\\n        archanovaAccount,\\n        etherspotAccount,\\n        tokens[i],\\n        tokensAmounts[i]\\n      );\\n    }\\n  }\\n\\n  function _transferENSNode(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    bytes32 ensNode\\n  )\\n    private\\n  {\\n    ArchanovaAccount(archanovaAccount).executeTransaction(\\n      payable(address(ensRegistry)),\\n      0,\\n      abi.encodeWithSelector(\\n        ensRegistry.setResolver.selector,\\n        ensNode,\\n        address(ensController)\\n      )\\n    );\\n\\n    ArchanovaAccount(archanovaAccount).executeTransaction(\\n      payable(address(ensController)),\\n      0,\\n      abi.encodeWithSelector(\\n        ensController.syncAddr.selector,\\n        ensNode\\n      )\\n    );\\n\\n    ArchanovaAccount(archanovaAccount).executeTransaction(\\n      payable(address(ensController)),\\n      0,\\n      abi.encodeWithSelector(\\n        ensController.setAddr.selector,\\n        ensNode,\\n        etherspotAccount\\n      )\\n    );\\n\\n    ArchanovaAccount(archanovaAccount).executeTransaction(\\n      payable(address(ensRegistry)),\\n      0,\\n      abi.encodeWithSelector(\\n        ensRegistry.setOwner.selector,\\n        ensNode,\\n        etherspotAccount\\n      )\\n    );\\n\\n    emit ENSNodeTransferred(\\n      archanovaAccount,\\n      etherspotAccount,\\n      ensNode\\n    );\\n  }\\n\\n  // private functions (views)\\n\\n  function _verifyArchanovaAccountOwner(\\n    address payable archanovaAccount,\\n    address payable etherspotAccount,\\n    bytes memory archanovaAccountDeviceSignature\\n  )\\n    private\\n    view\\n  {\\n    address recovered = keccak256(abi.encodePacked(\\n        \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n        keccak256(abi.encodePacked(\\n          chainId,\\n          address(this),\\n          MIGRATION_MESSAGE_PREFIX,\\n          archanovaAccount,\\n          etherspotAccount\\n        ))\\n      )).recoverAddress(archanovaAccountDeviceSignature);\\n\\n    (bool exists, bool isOwner, ) = ArchanovaAccount(archanovaAccount).devices(\\n      recovered\\n    );\\n\\n    require(\\n      exists && isOwner,\\n      \\\"ArchanovaMigrator: invalid archanovaAccountDeviceSignature\\\"\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x1885d424e1cec1bcca696ca563e90cbf1d45ec689a39fcb8a1a2d807a6371fbf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80636d03b0b9116100715780636d03b0b9146105795780637d73b231146105ad57806397b583b7146105e1578063bed5fada146106a4578063c7e7cea114610771578063e7cdc5d914610834576100a9565b80632984005c146100ae578063392e53cd1461021157806340c38bb614610231578063485cc9551461039e578063653ed82214610402575b600080fd5b61020f600480360360a08110156100c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561012157600080fd5b82018360208201111561013357600080fd5b8035906020019184602083028401116401000000008311171561015557600080fd5b90919293919293908035906020019064010000000081111561017657600080fd5b82018360208201111561018857600080fd5b803590602001918460208302840111640100000000831117156101aa57600080fd5b9091929391929390803590602001906401000000008111156101cb57600080fd5b8201836020820111156101dd57600080fd5b803590602001918460018302840111640100000000831117156101ff57600080fd5b90919293919293905050506109a1565b005b610219610a88565b60405180821515815260200191505060405180910390f35b61039c600480360360c081101561024757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156102ae57600080fd5b8201836020820111156102c057600080fd5b803590602001918460208302840111640100000000831117156102e257600080fd5b90919293919293908035906020019064010000000081111561030357600080fd5b82018360208201111561031557600080fd5b8035906020019184602083028401116401000000008311171561033757600080fd5b90919293919293908035906020019064010000000081111561035857600080fd5b82018360208201111561036a57600080fd5b8035906020019184600183028401116401000000008311171561038c57600080fd5b9091929391929390505050610ade565b005b610400600480360360408110156103b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bd1565b005b610577600480360360e081101561041857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561047f57600080fd5b82018360208201111561049157600080fd5b803590602001918460208302840111640100000000831117156104b357600080fd5b9091929391929390803590602001906401000000008111156104d457600080fd5b8201836020820111156104e657600080fd5b8035906020019184602083028401116401000000008311171561050857600080fd5b9091929391929390803590602001909291908035906020019064010000000081111561053357600080fd5b82018360208201111561054557600080fd5b8035906020019184600183028401116401000000008311171561056757600080fd5b9091929391929390505050610d89565b005b610581610e88565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105b5610eae565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106a2600480360360808110156105f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561065e57600080fd5b82018360208201111561067057600080fd5b8035906020019184600183028401116401000000008311171561069257600080fd5b9091929391929390505050610ed4565b005b61076f600480360360a08110156106ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561072b57600080fd5b82018360208201111561073d57600080fd5b8035906020019184600183028401116401000000008311171561075f57600080fd5b9091929391929390505050610f35565b005b6108326004803603608081101561078757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156107ee57600080fd5b82018360208201111561080057600080fd5b8035906020019184600183028401116401000000008311171561082257600080fd5b9091929391929390505050610fa2565b005b61099f600480360360c081101561084a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156108a757600080fd5b8201836020820111156108b957600080fd5b803590602001918460208302840111640100000000831117156108db57600080fd5b9091929391929390803590602001906401000000008111156108fc57600080fd5b82018360208201111561090e57600080fd5b8035906020019184602083028401116401000000008311171561093057600080fd5b9091929391929390803590602001909291908035906020019064010000000081111561095b57600080fd5b82018360208201111561096d57600080fd5b8035906020019184600183028401116401000000008311171561098f57600080fd5b9091929391929390505050611003565b005b6109f0888884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506110f6565b610a7e8888888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611359565b5050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b610b2d898984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506110f6565b610b38898989611752565b610bc68989888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611359565b505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610c75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806125a1602f913960400191505060405180910390fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e632604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b610dd88a8a84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506110f6565b610de38a8a8a611752565b610e718a8a898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611359565b610e7c8a8a856119ed565b50505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f23858584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506110f6565b610f2e858585611752565b5050505050565b610f84868684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506110f6565b610f8f868686611752565b610f9a8686856119ed565b505050505050565b610ff1858584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506110f6565b610ffc8585856119ed565b5050505050565b611052898984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506110f6565b6110e08989898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611359565b6110eb8989856119ed565b505050505050505050565b6000611232826003543060405160200180807f657468657273706f74203c3e2061726368616e6f7661206d6967726174696f6e8152506020019050604051602081830303815290604052805190602001208888604051602001808681526020018573ffffffffffffffffffffffffffffffffffffffff1660601b81526014018481526020018373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401955050505050506040516020818303038152906040528051906020012060405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001206124a190919063ffffffff16565b90506000808573ffffffffffffffffffffffffffffffffffffffff1663e7b4cac6846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060606040518083038186803b15801561129e57600080fd5b505afa1580156112b2573d6000803e3d6000fd5b505050506040513d60608110156112c857600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505050915091508180156112fc5750805b611351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001806125d0603a913960400191505060405180910390fd5b505050505050565b60008251905060005b8181101561174a5760608673ffffffffffffffffffffffffffffffffffffffff16633f579f4286848151811061139457fe5b6020026020010151600063a9059cbb60e01b8a8988815181106113b357fe5b6020026020010151604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114b657808201518184015260208101905061149b565b50505050905090810190601f1680156114e35780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561154257600080fd5b810190808051604051939291908464010000000082111561156257600080fd5b8382019150602082018581111561157857600080fd5b825186600182028301116401000000008211171561159557600080fd5b8083526020830192505050908051906020019080838360005b838110156115c95780820151818401526020810190506115ae565b50505050905090810190601f1680156115f65780820380516001836020036101000a031916815260200191505b5060405250505090506000815111156116855780806020019051602081101561161e57600080fd5b8101908080519060200190929190505050611684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612572602f913960400191505060405180910390fd5b5b7fd0903b4583e5a0dfc2926c9a77fe8376e96e3b6ba7dc1b11fbf335668ccb64b687878785815181106116b457fe5b60200260200101518786815181106116c857fe5b6020026020010151604051808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390a1508080600101915050611362565b505050505050565b8273ffffffffffffffffffffffffffffffffffffffff16633f579f428383600067ffffffffffffffff8111801561178857600080fd5b506040519080825280601f01601f1916602001820160405280156117bb5781602001600182028036833780820191505090505b506040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561182d578082015181840152602081019050611812565b50505050905090810190601f16801561185a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561187b57600080fd5b505af115801561188f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156118b957600080fd5b81019080805160405193929190846401000000008211156118d957600080fd5b838201915060208201858111156118ef57600080fd5b825186600182028301116401000000008211171561190c57600080fd5b8083526020830192505050908051906020019080838360005b83811015611940578082015181840152602081019050611925565b50505050905090810190601f16801561196d5780820380516001836020036101000a031916815260200191505b50604052505050507f4163d0b06696468b3d7903f482bcd0097bd38a9a9086157479fd6c6561d24261838383604051808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b8273ffffffffffffffffffffffffffffffffffffffff16633f579f42600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000631896f70a60e01b85600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602401808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b55578082015181840152602081019050611b3a565b50505050905090810190601f168015611b825780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611ba357600080fd5b505af1158015611bb7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611be157600080fd5b8101908080516040519392919084640100000000821115611c0157600080fd5b83820191506020820185811115611c1757600080fd5b8251866001820283011164010000000082111715611c3457600080fd5b8083526020830192505050908051906020019080838360005b83811015611c68578082015181840152602081019050611c4d565b50505050905090810190601f168015611c955780820380516001836020036101000a031916815260200191505b50604052505050508273ffffffffffffffffffffffffffffffffffffffff16633f579f42600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006355800f8760e01b8560405160240180828152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611dc5578082015181840152602081019050611daa565b50505050905090810190601f168015611df25780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611e1357600080fd5b505af1158015611e27573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611e5157600080fd5b8101908080516040519392919084640100000000821115611e7157600080fd5b83820191506020820185811115611e8757600080fd5b8251866001820283011164010000000082111715611ea457600080fd5b8083526020830192505050908051906020019080838360005b83811015611ed8578082015181840152602081019050611ebd565b50505050905090810190601f168015611f055780820380516001836020036101000a031916815260200191505b50604052505050508273ffffffffffffffffffffffffffffffffffffffff16633f579f42600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600063d5fa2b0060e01b8587604051602401808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612053578082015181840152602081019050612038565b50505050905090810190601f1680156120805780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156120a157600080fd5b505af11580156120b5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156120df57600080fd5b81019080805160405193929190846401000000008211156120ff57600080fd5b8382019150602082018581111561211557600080fd5b825186600182028301116401000000008211171561213257600080fd5b8083526020830192505050908051906020019080838360005b8381101561216657808201518184015260208101905061214b565b50505050905090810190601f1680156121935780820380516001836020036101000a031916815260200191505b50604052505050508273ffffffffffffffffffffffffffffffffffffffff16633f579f42600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000635b0fc9c360e01b8587604051602401808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156122e15780820151818401526020810190506122c6565b50505050905090810190601f16801561230e5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561232f57600080fd5b505af1158015612343573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561236d57600080fd5b810190808051604051939291908464010000000082111561238d57600080fd5b838201915060208201858111156123a357600080fd5b82518660018202830111640100000000821117156123c057600080fd5b8083526020830192505050908051906020019080838360005b838110156123f45780820151818401526020810190506123d9565b50505050905090810190601f1680156124215780820380516001836020036101000a031916815260200191505b50604052505050507f31535e192ff586e8ec781c584b15737846e79c3f17ebde9d9858f8dc36d3ffd8838383604051808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b600080600090506041835114156125675760008060006020860151925060408601519150606086015160001a9050601b8160ff1610156124e257601b810190505b601b8160ff1614806124f75750601c8160ff16145b156125635760018782858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612556573d6000803e3d6000fd5b5050506020604051035193505b5050505b809150509291505056fe41726368616e6f76614d69677261746f723a204552433230546f6b656e207472616e73666572207265766572746564496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742074686520696e697469616c697a657241726368616e6f76614d69677261746f723a20696e76616c69642061726368616e6f76614163636f756e744465766963655369676e6174757265a164736f6c634300060c000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@pillarproject.io>",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "public constructor"
      },
      "initialize(address,address)": {
        "params": {
          "ensController_": "ens controller address",
          "ensRegistry_": "ens registry address"
        }
      },
      "isInitialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      }
    },
    "title": "Archanova migrator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address)": {
        "notice": "Initializes `ArchanovaMigrator` contract"
      },
      "isInitialized()": {
        "notice": "Check if contract is initialized"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 611,
        "contract": "src/ArchanovaMigrator.sol:ArchanovaMigrator",
        "label": "initializer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2213,
        "contract": "src/ArchanovaMigrator.sol:ArchanovaMigrator",
        "label": "ensController",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ENSController)1755"
      },
      {
        "astId": 2215,
        "contract": "src/ArchanovaMigrator.sol:ArchanovaMigrator",
        "label": "ensRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ENSRegistry)1970"
      },
      {
        "astId": 2217,
        "contract": "src/ArchanovaMigrator.sol:ArchanovaMigrator",
        "label": "chainId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ENSController)1755": {
        "encoding": "inplace",
        "label": "contract ENSController",
        "numberOfBytes": "20"
      },
      "t_contract(ENSRegistry)1970": {
        "encoding": "inplace",
        "label": "contract ENSRegistry",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}