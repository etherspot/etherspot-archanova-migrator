{
  "address": "0x3E53A712c7a0C375136c23501A7fBC17A48De6b0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositWithdrawalLockPeriod",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NewDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NewPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NewWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockedAt",
          "type": "uint256"
        }
      ],
      "name": "NewWithdrawalRequest",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_senderSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "depositPayment",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "depositTokenTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "depositWithdrawalLockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalUnlockedAt",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getDepositValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getDepositWithdrawalUnlockedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawDeposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_senderSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "withdrawPayment",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b83858f087f1ec9e436cfde7151711e8e4f64defc831a1c845e8b29b6534076",
  "receipt": {
    "to": null,
    "from": "0x61f6dFAca3de098fB895A83197C59bC50a8AB39e",
    "contractAddress": "0x3E53A712c7a0C375136c23501A7fBC17A48De6b0",
    "transactionIndex": 0,
    "gasUsed": "2982097",
    "logsBloom": "0x
    "blockHash": "0x7a8c5702d484275a1349b3b4c278a46b63268133e1e35613d3e4d0d02352248c",
    "transactionHash": "0x7b83858f087f1ec9e436cfde7151711e8e4f64defc831a1c845e8b29b6534076",
    "logs": [],
    "blockNumber": 32,
    "cumulativeGasUsed": "2982097",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0c68aBae9eCfFbb683DcaaEf36F393804FEEE750",
    5
  ],
  "solcInputHash": "2d65759aa936f218b80b5cf1af768225",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositWithdrawalLockPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"}],\"name\":\"NewWithdrawalRequest\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_senderSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_guardianSignature\",\"type\":\"bytes\"}],\"name\":\"depositPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositWithdrawalLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalUnlockedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDepositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDepositWithdrawalUnlockedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_senderSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_guardianSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{},\"title\":\"Virtual Payment Manager\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/virtualPayment/VirtualPaymentManager.sol\":\"VirtualPaymentManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Elliptic curve signature operations\\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\\n * See https://github.com/ethereum/solidity/issues/864\\n */\\n\\nlibrary ECDSA {\\n    /**\\n     * @dev Recover signer address from a message by using their signature\\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * toEthSignedMessageHash\\n     * @dev prefix a bytes32 value with \\\"\\\\x19Ethereum Signed Message:\\\"\\n     * and hash the result\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0xb48974d92a87053dc1d6c5389f3d1b2ad522dec23afcb508eaa935d98dfdc0b6\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n    /**\\n     * Returns whether the target address is a contract\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     * as the code is not actually created until after the constructor finishes.\\n     * @param account address of the account to check\\n     * @return whether the target address is a contract\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // XXX Currently there is no better way to check if there is a contract in an address\\n        // than to check the size of the code at that address.\\n        // See https://ethereum.stackexchange.com/a/14016/36603\\n        // for more details about how this works.\\n        // TODO Check this again before the Serenity release, because all addresses will be\\n        // contracts then.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5c731061b804fa256fc8c05150eafe5d20b6bb94541a8f187912bf84f7033f34\"},\"src/account/AbstractAccount.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"./ERC1271.sol\\\";\\n\\n\\n/**\\n * @title Abstract Account\\n */\\ncontract AbstractAccount is ERC1271 {\\n\\n  event DeviceAdded(address device, bool isOwner);\\n  event DeviceRemoved(address device);\\n  event TransactionExecuted(address recipient, uint256 value, bytes data, bytes response);\\n\\n  struct Device {\\n    bool isOwner;\\n    bool exists;\\n    bool existed;\\n  }\\n\\n  mapping(address => Device) public devices;\\n\\n  function addDevice(address _device, bool _isOwner) public;\\n\\n  function removeDevice(address _device) public;\\n\\n  function executeTransaction(address payable _recipient, uint256 _value, bytes memory _data) public returns (bytes memory _response);\\n}\\n\",\"keccak256\":\"0xb35b2e0062a9305b14439db512f6d9d243e5d54c432d5136d080413bd0a19b45\"},\"src/account/AccountLibrary.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"./AbstractAccount.sol\\\";\\n\\n\\n/**\\n * @title Account Library\\n */\\nlibrary AccountLibrary {\\n\\n  using ECDSA for bytes32;\\n\\n  function isOwnerDevice(\\n    AbstractAccount _account,\\n    address _device\\n  ) internal view returns (bool) {\\n    bool isOwner;\\n    (isOwner,,) = _account.devices(_device);\\n    return isOwner;\\n  }\\n\\n  function isAnyDevice(\\n    AbstractAccount _account,\\n    address _device\\n  ) internal view returns (bool) {\\n    bool exists;\\n    (,exists,) = _account.devices(_device);\\n    return exists;\\n  }\\n\\n  function isExistedDevice(\\n    AbstractAccount _account,\\n    address _device\\n  ) internal view returns (bool) {\\n    bool existed;\\n    (,,existed) = _account.devices(_device);\\n    return existed;\\n  }\\n\\n  function verifyOwnerSignature(\\n    AbstractAccount _account,\\n    bytes32 _messageHash,\\n    bytes memory _signature\\n  ) internal view returns (bool _result) {\\n    address _recovered = _messageHash.recover(_signature);\\n\\n    if (_recovered != address(0)) {\\n      _result = isOwnerDevice(_account, _recovered);\\n    }\\n  }\\n\\n  function verifySignature(\\n    AbstractAccount _account,\\n    bytes32 _messageHash,\\n    bytes memory _signature,\\n    bool _strict\\n  ) internal view returns (bool _result) {\\n    address _recovered = _messageHash.recover(_signature);\\n\\n    if (_recovered != address(0)) {\\n      if (_strict) {\\n        _result = isAnyDevice(_account, _recovered);\\n      } else {\\n        _result = isExistedDevice(_account, _recovered);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x27bb32ce38d819d6e2c86a1f593e2e98855541eafac58c54ede6e6e4756826fa\"},\"src/account/ERC1271.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\ncontract ERC1271 {\\n\\n  // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n  bytes4 constant internal MAGICVALUE = 0x20c13b0b;\\n\\n  /**\\n   * @dev Should return whether the signature provided is valid for the provided data\\n   * @param _data Arbitrary length data signed on the behalf of address(this)\\n   * @param _signature Signature byte array associated with _data\\n   *\\n   * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n   * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n   * MUST allow external calls\\n   */\\n  function isValidSignature(\\n    bytes memory _data,\\n    bytes memory _signature\\n  ) public view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xa128c7faad858e42f18b7bd1e2d9bb0bd77ba1970d86133a05d4a0821394a906\"},\"src/address/AddressLibrary.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"openzeppelin-solidity/contracts/utils/Address.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"../account/AbstractAccount.sol\\\";\\nimport \\\"../account/AccountLibrary.sol\\\";\\n\\n\\n/**\\n * @title Address Library\\n */\\nlibrary AddressLibrary {\\n\\n  using AccountLibrary for AbstractAccount;\\n  using Address for address;\\n  using ECDSA for bytes32;\\n\\n  function verifySignature(\\n    address _address,\\n    bytes32 _messageHash,\\n    bytes memory _signature,\\n    bool _strict\\n  ) internal view returns (bool _result) {\\n    if (_address.isContract()) {\\n      _result = AbstractAccount(_address).verifySignature(\\n        _messageHash,\\n        _signature,\\n        _strict\\n      );\\n    } else {\\n      address _recovered = _messageHash.recover(_signature);\\n      _result = _recovered == _address;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xee5e38fe30b40ada06bcc78281203a5d2ef2541c0f14d5797bedbaeb19df81bd\"},\"src/virtualPayment/VirtualPaymentManager.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"../address/AddressLibrary.sol\\\";\\n\\n/**\\n * @title Virtual Payment Manager\\n */\\ncontract VirtualPaymentManager {\\n\\n  using AddressLibrary for address;\\n  using ECDSA for bytes32;\\n  using SafeMath for uint256;\\n\\n  event NewDeposit(address owner, address token, uint256 value);\\n  event NewWithdrawal(address recipient, address token, uint256 value);\\n  event NewWithdrawalRequest(address owner, address token, uint256 unlockedAt);\\n  event NewPayment(address sender, address recipient, address token, uint256 id, uint256 value);\\n\\n  struct Deposit {\\n    uint256 value;\\n    uint256 withdrawalUnlockedAt;\\n  }\\n\\n  struct Payment {\\n    uint256 value;\\n  }\\n\\n  mapping(address => mapping(address => Deposit)) public deposits;\\n  mapping(bytes32 => Payment) public payments;\\n\\n  address public guardian;\\n  uint256 public depositWithdrawalLockPeriod;\\n\\n  string constant ERR_INVALID_SIGNATURE = \\\"Invalid signature\\\";\\n  string constant ERR_INVALID_OWNER = \\\"Invalid owner\\\";\\n  string constant ERR_INVALID_VALUE = \\\"Invalid value\\\";\\n  string constant ERR_INVALID_TOKEN = \\\"Invalid token\\\";\\n\\n  bytes4 constant ERC20_TRANSFER = bytes4(keccak256(\\\"transfer(address,uint256)\\\"));\\n  bytes4 constant ERC20_TRANSFER_FROM = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"));\\n\\n  constructor(\\n    address _guardian,\\n    uint256 _depositWithdrawalLockPeriod\\n  ) public {\\n    guardian = _guardian;\\n    depositWithdrawalLockPeriod = _depositWithdrawalLockPeriod;\\n  }\\n\\n  function getDepositValue(address _owner, address _token) public view returns (uint256) {\\n    return deposits[_owner][_token].value;\\n  }\\n\\n  function getDepositWithdrawalUnlockedAt(address _owner, address _token) public view returns (uint256) {\\n    return deposits[_owner][_token].withdrawalUnlockedAt;\\n  }\\n\\n  function() external payable {\\n    require(\\n      msg.value > 0,\\n      ERR_INVALID_VALUE\\n    );\\n\\n    deposits[msg.sender][address(0)].value = deposits[msg.sender][address(0)].value.add(msg.value);\\n\\n    emit NewDeposit(msg.sender, address(0), msg.value);\\n  }\\n\\n  function depositTo(address _owner) payable public {\\n    require(\\n      _owner != address(0),\\n      ERR_INVALID_OWNER\\n    );\\n    require(\\n      msg.value > 0,\\n      ERR_INVALID_VALUE\\n    );\\n\\n    deposits[_owner][address(0)].value = deposits[_owner][address(0)].value.add(msg.value);\\n\\n    emit NewDeposit(msg.sender, address(0), msg.value);\\n  }\\n\\n  function depositToken(address _token, uint256 _value) public {\\n    require(\\n      _token != address(0),\\n      ERR_INVALID_TOKEN\\n    );\\n    require(\\n      _value > 0,\\n      ERR_INVALID_VALUE\\n    );\\n\\n    _transferTokenFrom(_token, msg.sender, _value);\\n\\n    deposits[msg.sender][_token].value = deposits[msg.sender][_token].value.add(_value);\\n\\n    emit NewDeposit(msg.sender, _token, _value);\\n  }\\n\\n  function depositTokenTo(address _owner, address _token, uint256 _value) public {\\n    require(\\n      _owner != address(0),\\n      ERR_INVALID_OWNER\\n    );\\n    require(\\n      _token != address(0),\\n      ERR_INVALID_TOKEN\\n    );\\n    require(\\n      _value > 0,\\n      ERR_INVALID_VALUE\\n    );\\n\\n    _transferTokenFrom(_token, msg.sender, _value);\\n\\n    deposits[_owner][_token].value = deposits[_owner][_token].value.add(_value);\\n\\n    emit NewDeposit(_owner, _token, _value);\\n  }\\n\\n  function depositPayment(\\n    address _sender,\\n    address _recipient,\\n    address _token,\\n    uint256 _id,\\n    uint256 _value,\\n    bytes memory _senderSignature,\\n    bytes memory _guardianSignature\\n  ) public {\\n    uint256 _processedValue = _processPayment(\\n      _sender,\\n      _recipient,\\n      _token,\\n      _id,\\n      _value,\\n      _senderSignature,\\n      _guardianSignature\\n    );\\n\\n    deposits[_recipient][_token].value = deposits[_recipient][_token].value.add(_processedValue);\\n\\n    emit NewPayment(_sender, _recipient, _token, _id, _processedValue);\\n    emit NewDeposit(_recipient, _token, _processedValue);\\n  }\\n\\n  function withdrawPayment(\\n    address _sender,\\n    address _recipient,\\n    address _token,\\n    uint256 _id,\\n    uint256 _value,\\n    bytes memory _senderSignature,\\n    bytes memory _guardianSignature\\n  ) public {\\n    uint256 _processedValue = _processPayment(\\n      _sender,\\n      _recipient,\\n      _token,\\n      _id,\\n      _value,\\n      _senderSignature,\\n      _guardianSignature\\n    );\\n\\n    _transfer(_recipient, _token, _processedValue);\\n\\n    emit NewPayment(_sender, _recipient, _token, _id, _processedValue);\\n    emit NewWithdrawal(_recipient, _token, _processedValue);\\n  }\\n\\n  function withdrawDeposit(address _token) public {\\n    if (\\n      deposits[msg.sender][_token].withdrawalUnlockedAt != 0 && deposits[msg.sender][_token].withdrawalUnlockedAt <= now\\n    ) {\\n      _transfer(msg.sender, _token, deposits[msg.sender][_token].value);\\n\\n      emit NewWithdrawal(msg.sender, _token, deposits[msg.sender][_token].value);\\n\\n      delete deposits[msg.sender][_token];\\n    } else {\\n      deposits[msg.sender][_token].withdrawalUnlockedAt = now.add(depositWithdrawalLockPeriod);\\n\\n      emit NewWithdrawalRequest(msg.sender, _token, deposits[msg.sender][_token].withdrawalUnlockedAt);\\n    }\\n  }\\n\\n  function _processPayment(\\n    address _sender,\\n    address _recipient,\\n    address _token,\\n    uint256 _id,\\n    uint256 _value,\\n    bytes memory _senderSignature,\\n    bytes memory _guardianSignature\\n  ) private returns (uint256 _processedValue) {\\n    bytes32 _messageHash = keccak256(\\n      abi.encodePacked(\\n        address(this),\\n        _sender,\\n        _recipient,\\n        _token,\\n        _id,\\n        _value\\n      )\\n    ).toEthSignedMessageHash();\\n\\n    require(\\n      _sender.verifySignature(_messageHash, _senderSignature, false),\\n      ERR_INVALID_SIGNATURE\\n    );\\n    require(\\n      guardian.verifySignature(_messageHash, _guardianSignature, true),\\n      ERR_INVALID_SIGNATURE\\n    );\\n\\n    bytes32 _paymentHash = keccak256(abi.encodePacked(\\n        _sender,\\n        _recipient,\\n        _token,\\n        _id\\n      ));\\n\\n    require(\\n      _value > 0,\\n      ERR_INVALID_VALUE\\n    );\\n\\n    if (payments[_paymentHash].value > 0) {\\n      require(\\n        payments[_paymentHash].value < _value,\\n        ERR_INVALID_VALUE\\n      );\\n      _processedValue = _value.sub(payments[_paymentHash].value);\\n    } else {\\n      _processedValue = _value;\\n    }\\n\\n    require(\\n      deposits[_sender][_token].value >= _processedValue,\\n      ERR_INVALID_VALUE\\n    );\\n\\n    if (deposits[_sender][_token].withdrawalUnlockedAt > 0) {\\n      delete deposits[_sender][_token].withdrawalUnlockedAt;\\n    }\\n\\n    payments[_paymentHash].value = _value;\\n    deposits[_sender][_token].value = deposits[_sender][_token].value.sub(_processedValue);\\n  }\\n\\n  function _transfer(address _recipient, address _token, uint256 _value) private {\\n    if (_token == address(0)) {\\n      address payable _payableRecipient = address(uint160(_recipient));\\n      _payableRecipient.transfer(_value);\\n    } else {\\n      _transferToken(_token, _recipient, _value);\\n    }\\n  }\\n\\n  function _transferToken(address _token, address _recipient, uint256 _value) private {\\n    bool _success;\\n\\n    (_success,) = _token.call(abi.encodeWithSelector(\\n      ERC20_TRANSFER,\\n      _recipient,\\n      _value\\n    ));\\n\\n    require(_success);\\n  }\\n\\n  function _transferTokenFrom(address _token, address _sender, uint256 _value) private {\\n    bool _success;\\n\\n    (_success,) = _token.call(abi.encodeWithSelector(\\n      ERC20_TRANSFER_FROM,\\n      _sender,\\n      address(this),\\n      _value\\n    ));\\n\\n    require(_success);\\n  }\\n}\\n\",\"keccak256\":\"0xf2bdadff257c1e0f723fb6f08492f109ea63533ec619bdccc0de878dd1d432d7\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516134fa3803806134fa8339818101604052604081101561003357600080fd5b81019080805190602001909291908051906020019092919050505081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003819055505050613453806100a76000396000f3fe6080604052600436106100a75760003560e01c806355aef0d61161006457806355aef0d61461068d5780638f601f6614610712578063a6f75a931461079e578063b760faf914610823578063eef0246814610867578063f398e872146108e2576100a7565b80630716326d1461033d57806329d7d95f1461038c578063338b5dea1461055f578063452a9320146105ba57806351e4170014610611578063525fb19414610662575b600034116040518060400160405280600d81526020017f496e76616c69642076616c75650000000000000000000000000000000000000081525090610187576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561014c578082015181840152602081019050610131565b50505050905090810190601f1680156101795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610219346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ab590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f83df459d706116d1b3f1c7b7f77cfea4c635275f5d1e1a53827f536ef48db77d33600034604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1005b34801561034957600080fd5b506103766004803603602081101561036057600080fd5b8101908080359060200190929190505050610ad4565b6040518082815260200191505060405180910390f35b34801561039857600080fd5b5061055d600480360360e08110156103af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561044057600080fd5b82018360208201111561045257600080fd5b8035906020019184600183028401116401000000008311171561047457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156104d757600080fd5b8201836020820111156104e957600080fd5b8035906020019184600183028401116401000000008311171561050b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610af2565b005b34801561056b57600080fd5b506105b86004803603604081101561058257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c94565b005b3480156105c657600080fd5b506105cf611044565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061d57600080fd5b506106606004803603602081101561063457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061106a565b005b34801561066e57600080fd5b5061067761156d565b6040518082815260200191505060405180910390f35b34801561069957600080fd5b506106fc600480360360408110156106b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611573565b6040518082815260200191505060405180910390f35b34801561071e57600080fd5b506107816004803603604081101561073557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115fc565b604051808381526020018281526020019250505060405180910390f35b3480156107aa57600080fd5b5061080d600480360360408110156107c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061162d565b6040518082815260200191505060405180910390f35b6108656004803603602081101561083957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b6565b005b34801561087357600080fd5b506108e06004803603606081101561088a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a5b565b005b3480156108ee57600080fd5b50610ab3600480360360e081101561090557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561099657600080fd5b8201836020820111156109a857600080fd5b803590602001918460018302840111640100000000831117156109ca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a2d57600080fd5b820183602082011115610a3f57600080fd5b80359060200191846001830284011164010000000083111715610a6157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f1a565b005b600080828401905083811015610aca57600080fd5b8091505092915050565b60016020528060005260406000206000915090508060000154905081565b6000610b03888888888888886121c4565b9050610b10878783612bb2565b7f8b265c5f47dbb02d85eec340b11f85b22d198c26fb58e93864ee4449b42a4bad8888888885604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019550505050505060405180910390a17f342cefd1b5d176844b82654eddd03fb5a01ec1025b51048cff802621dd873da4878783604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600d81526020017f496e76616c696420746f6b656e0000000000000000000000000000000000000081525090610da1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d66578082015181840152602081019050610d4b565b50505050905090810190601f168015610d935780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600081116040518060400160405280600d81526020017f496e76616c69642076616c75650000000000000000000000000000000000000081525090610e82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e47578082015181840152602081019050610e2c565b50505050905090810190601f168015610e745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610e8e823383612c4a565b610f1f816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ab590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f83df459d706116d1b3f1c7b7f77cfea4c635275f5d1e1a53827f536ef48db77d338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141580156111775750426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411155b156113b55761120533826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154612bb2565b7f342cefd1b5d176844b82654eddd03fb5a01ec1025b51048cff802621dd873da433826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160009055505061156a565b6113ca60035442610ab590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507fe2feb33d2d0b48e1364da707aece2a0c371646b38401306e481b51468225cc3433826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b50565b60035481565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905092915050565b6000602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600d81526020017f496e76616c6964206f776e657200000000000000000000000000000000000000815250906117c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561178857808201518184015260208101905061176d565b50505050905090810190601f1680156117b55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600034116040518060400160405280600d81526020017f496e76616c69642076616c756500000000000000000000000000000000000000815250906118a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561186957808201518184015260208101905061184e565b50505050905090810190601f1680156118965780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611936346000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ab590919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f83df459d706116d1b3f1c7b7f77cfea4c635275f5d1e1a53827f536ef48db77d33600034604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600d81526020017f496e76616c6964206f776e65720000000000000000000000000000000000000081525090611b68576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611b2d578082015181840152602081019050611b12565b50505050905090810190601f168015611b5a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600d81526020017f496e76616c696420746f6b656e0000000000000000000000000000000000000081525090611c76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c3b578082015181840152602081019050611c20565b50505050905090810190601f168015611c685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600081116040518060400160405280600d81526020017f496e76616c69642076616c75650000000000000000000000000000000000000081525090611d57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611d1c578082015181840152602081019050611d01565b50505050905090810190601f168015611d495780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611d63823383612c4a565b611df4816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ab590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f83df459d706116d1b3f1c7b7f77cfea4c635275f5d1e1a53827f536ef48db77d838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b6000611f2b888888888888886121c4565b9050611fbe816000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ab590919063ffffffff16565b6000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f8b265c5f47dbb02d85eec340b11f85b22d198c26fb58e93864ee4449b42a4bad8888888885604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019550505050505060405180910390a17f83df459d706116d1b3f1c7b7f77cfea4c635275f5d1e1a53827f536ef48db77d878783604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050505050505050565b6000806122da308a8a8a8a8a604051602001808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401838152602001828152602001965050505050505060405160208183030381529060405280519060200120612e02565b905061230a818560008c73ffffffffffffffffffffffffffffffffffffffff16612e5a909392919063ffffffff16565b6040518060400160405280601181526020017f496e76616c6964207369676e6174757265000000000000000000000000000000815250906123e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123ab578082015181840152602081019050612390565b50505050905090810190601f1680156123d85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061243781846001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612e5a909392919063ffffffff16565b6040518060400160405280601181526020017f496e76616c6964207369676e617475726500000000000000000000000000000081525090612513576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124d85780820151818401526020810190506124bd565b50505050905090810190601f1680156125055780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600089898989604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001945050505050604051602081830303815290604052805190602001209050600086116040518060400160405280600d81526020017f496e76616c69642076616c756500000000000000000000000000000000000000815250906126c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561268957808201518184015260208101905061266e565b50505050905090810190601f1680156126b65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006001600083815260200190815260200160002060000154111561280a57856001600083815260200190815260200160002060000154106040518060400160405280600d81526020017f496e76616c69642076616c756500000000000000000000000000000000000000815250906127d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561279e578082015181840152602081019050612783565b50505050905090810190601f1680156127cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612803600160008381526020019081526020016000206000015487612f0690919063ffffffff16565b925061280e565b8592505b826000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410156040518060400160405280600d81526020017f496e76616c69642076616c7565000000000000000000000000000000000000008152509061296c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612931578082015181840152602081019050612916565b50505050905090810190601f16801561295e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541115612a77576000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600090555b856001600083815260200190815260200160002060000181905550612b23836000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154612f0690919063ffffffff16565b6000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505050979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612c395760008390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612c32573d6000803e3d6000fd5b5050612c45565b612c44828483612f26565b5b505050565b60008373ffffffffffffffffffffffffffffffffffffffff1660405180806133fa6025913960250190506040518091039020843085604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310612d855780518252602082019150602081019050602083039250612d62565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612de7576040519150601f19603f3d011682016040523d82523d6000602084013e612dec565b606091505b50508091505080612dfc57600080fd5b50505050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050919050565b6000612e7b8573ffffffffffffffffffffffffffffffffffffffff166130c7565b15612eb457612ead8484848873ffffffffffffffffffffffffffffffffffffffff166130da909392919063ffffffff16565b9050612efe565b6000612ec9848661315490919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149150505b949350505050565b600082821115612f1557600080fd5b600082840390508091505092915050565b60008373ffffffffffffffffffffffffffffffffffffffff1660405180807f7472616e7366657228616464726573732c75696e743235362900000000000000815250601901905060405180910390208484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061304a5780518252602082019150602081019050602083039250613027565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146130ac576040519150601f19603f3d011682016040523d82523d6000602084013e6130b1565b606091505b505080915050806130c157600080fd5b50505050565b600080823b905060008111915050919050565b6000806130f0848661315490919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461314b57821561313d576131368682613236565b915061314a565b6131478682613317565b91505b5b50949350505050565b600080600080604185511461316f5760009350505050613230565b6020850151925060408501519150606085015160001a9050601b8160ff16101561319a57601b810190505b601b8160ff16141580156131b25750601c8160ff1614155b156131c35760009350505050613230565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613220573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e7b4cac6846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060606040518083038186803b1580156132b657600080fd5b505afa1580156132ca573d6000803e3d6000fd5b505050506040513d60608110156132e057600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505090915050809150508091505092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e7b4cac6846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060606040518083038186803b15801561339757600080fd5b505afa1580156133ab573d6000803e3d6000fd5b505050506040513d60608110156133c157600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050909150905080915050809150509291505056fe7472616e7366657246726f6d28616464726573732c616464726573732c75696e7432353629a265627a7a72315820a5947f793daa4bb687888d7459385de0bc8f7efa15edc83590fb34c518e93d5a64736f6c63430005110032",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c806355aef0d61161006457806355aef0d61461068d5780638f601f6614610712578063a6f75a931461079e578063b760faf914610823578063eef0246814610867578063f398e872146108e2576100a7565b80630716326d1461033d57806329d7d95f1461038c578063338b5dea1461055f578063452a9320146105ba57806351e4170014610611578063525fb19414610662575b600034116040518060400160405280600d81526020017f496e76616c69642076616c75650000000000000000000000000000000000000081525090610187576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561014c578082015181840152602081019050610131565b50505050905090810190601f1680156101795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610219346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ab590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f83df459d706116d1b3f1c7b7f77cfea4c635275f5d1e1a53827f536ef48db77d33600034604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1005b34801561034957600080fd5b506103766004803603602081101561036057600080fd5b8101908080359060200190929190505050610ad4565b6040518082815260200191505060405180910390f35b34801561039857600080fd5b5061055d600480360360e08110156103af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561044057600080fd5b82018360208201111561045257600080fd5b8035906020019184600183028401116401000000008311171561047457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156104d757600080fd5b8201836020820111156104e957600080fd5b8035906020019184600183028401116401000000008311171561050b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610af2565b005b34801561056b57600080fd5b506105b86004803603604081101561058257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c94565b005b3480156105c657600080fd5b506105cf611044565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061d57600080fd5b506106606004803603602081101561063457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061106a565b005b34801561066e57600080fd5b5061067761156d565b6040518082815260200191505060405180910390f35b34801561069957600080fd5b506106fc600480360360408110156106b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611573565b6040518082815260200191505060405180910390f35b34801561071e57600080fd5b506107816004803603604081101561073557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115fc565b604051808381526020018281526020019250505060405180910390f35b3480156107aa57600080fd5b5061080d600480360360408110156107c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061162d565b6040518082815260200191505060405180910390f35b6108656004803603602081101561083957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b6565b005b34801561087357600080fd5b506108e06004803603606081101561088a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a5b565b005b3480156108ee57600080fd5b50610ab3600480360360e081101561090557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561099657600080fd5b8201836020820111156109a857600080fd5b803590602001918460018302840111640100000000831117156109ca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a2d57600080fd5b820183602082011115610a3f57600080fd5b80359060200191846001830284011164010000000083111715610a6157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f1a565b005b600080828401905083811015610aca57600080fd5b8091505092915050565b60016020528060005260406000206000915090508060000154905081565b6000610b03888888888888886121c4565b9050610b10878783612bb2565b7f8b265c5f47dbb02d85eec340b11f85b22d198c26fb58e93864ee4449b42a4bad8888888885604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019550505050505060405180910390a17f342cefd1b5d176844b82654eddd03fb5a01ec1025b51048cff802621dd873da4878783604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600d81526020017f496e76616c696420746f6b656e0000000000000000000000000000000000000081525090610da1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d66578082015181840152602081019050610d4b565b50505050905090810190601f168015610d935780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600081116040518060400160405280600d81526020017f496e76616c69642076616c75650000000000000000000000000000000000000081525090610e82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e47578082015181840152602081019050610e2c565b50505050905090810190601f168015610e745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610e8e823383612c4a565b610f1f816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ab590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f83df459d706116d1b3f1c7b7f77cfea4c635275f5d1e1a53827f536ef48db77d338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141580156111775750426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411155b156113b55761120533826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154612bb2565b7f342cefd1b5d176844b82654eddd03fb5a01ec1025b51048cff802621dd873da433826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160009055505061156a565b6113ca60035442610ab590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055507fe2feb33d2d0b48e1364da707aece2a0c371646b38401306e481b51468225cc3433826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15b50565b60035481565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905092915050565b6000602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600d81526020017f496e76616c6964206f776e657200000000000000000000000000000000000000815250906117c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561178857808201518184015260208101905061176d565b50505050905090810190601f1680156117b55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600034116040518060400160405280600d81526020017f496e76616c69642076616c756500000000000000000000000000000000000000815250906118a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561186957808201518184015260208101905061184e565b50505050905090810190601f1680156118965780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611936346000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ab590919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f83df459d706116d1b3f1c7b7f77cfea4c635275f5d1e1a53827f536ef48db77d33600034604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600d81526020017f496e76616c6964206f776e65720000000000000000000000000000000000000081525090611b68576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611b2d578082015181840152602081019050611b12565b50505050905090810190601f168015611b5a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600d81526020017f496e76616c696420746f6b656e0000000000000000000000000000000000000081525090611c76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c3b578082015181840152602081019050611c20565b50505050905090810190601f168015611c685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600081116040518060400160405280600d81526020017f496e76616c69642076616c75650000000000000000000000000000000000000081525090611d57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611d1c578082015181840152602081019050611d01565b50505050905090810190601f168015611d495780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50611d63823383612c4a565b611df4816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ab590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f83df459d706116d1b3f1c7b7f77cfea4c635275f5d1e1a53827f536ef48db77d838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b6000611f2b888888888888886121c4565b9050611fbe816000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ab590919063ffffffff16565b6000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055507f8b265c5f47dbb02d85eec340b11f85b22d198c26fb58e93864ee4449b42a4bad8888888885604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019550505050505060405180910390a17f83df459d706116d1b3f1c7b7f77cfea4c635275f5d1e1a53827f536ef48db77d878783604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050505050505050565b6000806122da308a8a8a8a8a604051602001808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401838152602001828152602001965050505050505060405160208183030381529060405280519060200120612e02565b905061230a818560008c73ffffffffffffffffffffffffffffffffffffffff16612e5a909392919063ffffffff16565b6040518060400160405280601181526020017f496e76616c6964207369676e6174757265000000000000000000000000000000815250906123e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123ab578082015181840152602081019050612390565b50505050905090810190601f1680156123d85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061243781846001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612e5a909392919063ffffffff16565b6040518060400160405280601181526020017f496e76616c6964207369676e617475726500000000000000000000000000000081525090612513576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124d85780820151818401526020810190506124bd565b50505050905090810190601f1680156125055780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600089898989604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001945050505050604051602081830303815290604052805190602001209050600086116040518060400160405280600d81526020017f496e76616c69642076616c756500000000000000000000000000000000000000815250906126c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561268957808201518184015260208101905061266e565b50505050905090810190601f1680156126b65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006001600083815260200190815260200160002060000154111561280a57856001600083815260200190815260200160002060000154106040518060400160405280600d81526020017f496e76616c69642076616c756500000000000000000000000000000000000000815250906127d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561279e578082015181840152602081019050612783565b50505050905090810190601f1680156127cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612803600160008381526020019081526020016000206000015487612f0690919063ffffffff16565b925061280e565b8592505b826000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410156040518060400160405280600d81526020017f496e76616c69642076616c7565000000000000000000000000000000000000008152509061296c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612931578082015181840152602081019050612916565b50505050905090810190601f16801561295e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541115612a77576000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600090555b856001600083815260200190815260200160002060000181905550612b23836000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154612f0690919063ffffffff16565b6000808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505050979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612c395760008390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612c32573d6000803e3d6000fd5b5050612c45565b612c44828483612f26565b5b505050565b60008373ffffffffffffffffffffffffffffffffffffffff1660405180806133fa6025913960250190506040518091039020843085604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310612d855780518252602082019150602081019050602083039250612d62565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612de7576040519150601f19603f3d011682016040523d82523d6000602084013e612dec565b606091505b50508091505080612dfc57600080fd5b50505050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050919050565b6000612e7b8573ffffffffffffffffffffffffffffffffffffffff166130c7565b15612eb457612ead8484848873ffffffffffffffffffffffffffffffffffffffff166130da909392919063ffffffff16565b9050612efe565b6000612ec9848661315490919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149150505b949350505050565b600082821115612f1557600080fd5b600082840390508091505092915050565b60008373ffffffffffffffffffffffffffffffffffffffff1660405180807f7472616e7366657228616464726573732c75696e743235362900000000000000815250601901905060405180910390208484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061304a5780518252602082019150602081019050602083039250613027565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146130ac576040519150601f19603f3d011682016040523d82523d6000602084013e6130b1565b606091505b505080915050806130c157600080fd5b50505050565b600080823b905060008111915050919050565b6000806130f0848661315490919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461314b57821561313d576131368682613236565b915061314a565b6131478682613317565b91505b5b50949350505050565b600080600080604185511461316f5760009350505050613230565b6020850151925060408501519150606085015160001a9050601b8160ff16101561319a57601b810190505b601b8160ff16141580156131b25750601c8160ff1614155b156131c35760009350505050613230565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613220573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e7b4cac6846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060606040518083038186803b1580156132b657600080fd5b505afa1580156132ca573d6000803e3d6000fd5b505050506040513d60608110156132e057600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505090915050809150508091505092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e7b4cac6846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060606040518083038186803b15801561339757600080fd5b505afa1580156133ab573d6000803e3d6000fd5b505050506040513d60608110156133c157600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050909150905080915050809150509291505056fe7472616e7366657246726f6d28616464726573732c616464726573732c75696e7432353629a265627a7a72315820a5947f793daa4bb687888d7459385de0bc8f7efa15edc83590fb34c518e93d5a64736f6c63430005110032",
  "devdoc": {
    "methods": {},
    "title": "Virtual Payment Manager"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4518,
        "contract": "src/virtualPayment/VirtualPaymentManager.sol:VirtualPaymentManager",
        "label": "deposits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Deposit)4509_storage))"
      },
      {
        "astId": 4522,
        "contract": "src/virtualPayment/VirtualPaymentManager.sol:VirtualPaymentManager",
        "label": "payments",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Payment)4512_storage)"
      },
      {
        "astId": 4524,
        "contract": "src/virtualPayment/VirtualPaymentManager.sol:VirtualPaymentManager",
        "label": "guardian",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4526,
        "contract": "src/virtualPayment/VirtualPaymentManager.sol:VirtualPaymentManager",
        "label": "depositWithdrawalLockPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Deposit)4509_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct VirtualPaymentManager.Deposit))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Deposit)4509_storage)"
      },
      "t_mapping(t_address,t_struct(Deposit)4509_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VirtualPaymentManager.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)4509_storage"
      },
      "t_mapping(t_bytes32,t_struct(Payment)4512_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VirtualPaymentManager.Payment)",
        "numberOfBytes": "32",
        "value": "t_struct(Payment)4512_storage"
      },
      "t_struct(Deposit)4509_storage": {
        "encoding": "inplace",
        "label": "struct VirtualPaymentManager.Deposit",
        "members": [
          {
            "astId": 4506,
            "contract": "src/virtualPayment/VirtualPaymentManager.sol:VirtualPaymentManager",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4508,
            "contract": "src/virtualPayment/VirtualPaymentManager.sol:VirtualPaymentManager",
            "label": "withdrawalUnlockedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Payment)4512_storage": {
        "encoding": "inplace",
        "label": "struct VirtualPaymentManager.Payment",
        "members": [
          {
            "astId": 4511,
            "contract": "src/virtualPayment/VirtualPaymentManager.sol:VirtualPaymentManager",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}