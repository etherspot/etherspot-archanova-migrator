{
  "address": "0x972efDEd3Ec7005f28A27F3C26C742BEd391ef97",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_accountContractCode",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_accountProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ens",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountEnsNameUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rootNode",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EnsRootNodeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rootNode",
          "type": "bytes32"
        }
      ],
      "name": "EnsRootNodeReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rootNode",
          "type": "bytes32"
        }
      ],
      "name": "EnsRootNodeVerified",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rootNode",
          "type": "bytes32"
        }
      ],
      "name": "addEnsRootNode",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ensLabel",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_ensNode",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_refundGas",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "createAccount",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ensRootNodes",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "contract AbstractAccount",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rootNode",
          "type": "bytes32"
        }
      ],
      "name": "releaseEnsRootNode",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_accountId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_device",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ensLabel",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_ensNode",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_refundGas",
          "type": "uint256"
        }
      ],
      "name": "unsafeCreateAccount",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ensLabel",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_ensNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "updateAccountEnsName",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rootNode",
          "type": "bytes32"
        }
      ],
      "name": "verifyEnsRootNode",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8327f75c93522de1dc4e1a26aa8ca0e12ad007323911e871f6f0ebaca7cf9eb1",
  "receipt": {
    "to": null,
    "from": "0x61f6dFAca3de098fB895A83197C59bC50a8AB39e",
    "contractAddress": "0x972efDEd3Ec7005f28A27F3C26C742BEd391ef97",
    "transactionIndex": 0,
    "gasUsed": "5062319",
    "logsBloom": "0x
    "blockHash": "0x452e04002317efffe9ac7dcf6d114e64626610a47b1f5e157cb8217e8d69f650",
    "transactionHash": "0x8327f75c93522de1dc4e1a26aa8ca0e12ad007323911e871f6f0ebaca7cf9eb1",
    "logs": [],
    "blockNumber": 46,
    "cumulativeGasUsed": "5062319",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0c68aBae9eCfFbb683DcaaEf36F393804FEEE750",
    "",
    "0x621ebfa1B5246F3B77af5EB165441845D21dAB8D",
    "0xF4901936071aA71426aa57629Af5AED68914DC8b"
  ],
  "solcInputHash": "2d65759aa936f218b80b5cf1af768225",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_accountContractCode\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_accountProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ens\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountEnsNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootNode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EnsRootNodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootNode\",\"type\":\"bytes32\"}],\"name\":\"EnsRootNodeReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootNode\",\"type\":\"bytes32\"}],\"name\":\"EnsRootNodeVerified\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rootNode\",\"type\":\"bytes32\"}],\"name\":\"addEnsRootNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ensLabel\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_refundGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ensRootNodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"contract AbstractAccount\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rootNode\",\"type\":\"bytes32\"}],\"name\":\"releaseEnsRootNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_accountId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_device\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ensLabel\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_refundGas\",\"type\":\"uint256\"}],\"name\":\"unsafeCreateAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ensLabel\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_ensNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_guardianSignature\",\"type\":\"bytes\"}],\"name\":\"updateAccountEnsName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rootNode\",\"type\":\"bytes32\"}],\"name\":\"verifyEnsRootNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{},\"title\":\"Account Provider V1\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/account/AccountProviderV1.sol\":\"AccountProviderV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens/contracts/ENS.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external;\\n    function setOwner(bytes32 node, address owner) external;\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function owner(bytes32 node) external view returns (address);\\n    function resolver(bytes32 node) external view returns (address);\\n    function ttl(bytes32 node) external view returns (uint64);\\n    function recordExists(bytes32 node) external view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x10b88673d8c180cd62523be4fec7607c65594eb4f0c561fa0fbc0784422b4871\"},\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Elliptic curve signature operations\\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\\n * See https://github.com/ethereum/solidity/issues/864\\n */\\n\\nlibrary ECDSA {\\n    /**\\n     * @dev Recover signer address from a message by using their signature\\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * toEthSignedMessageHash\\n     * @dev prefix a bytes32 value with \\\"\\\\x19Ethereum Signed Message:\\\"\\n     * and hash the result\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0xb48974d92a87053dc1d6c5389f3d1b2ad522dec23afcb508eaa935d98dfdc0b6\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\"},\"src/account/AbstractAccount.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"./ERC1271.sol\\\";\\n\\n\\n/**\\n * @title Abstract Account\\n */\\ncontract AbstractAccount is ERC1271 {\\n\\n  event DeviceAdded(address device, bool isOwner);\\n  event DeviceRemoved(address device);\\n  event TransactionExecuted(address recipient, uint256 value, bytes data, bytes response);\\n\\n  struct Device {\\n    bool isOwner;\\n    bool exists;\\n    bool existed;\\n  }\\n\\n  mapping(address => Device) public devices;\\n\\n  function addDevice(address _device, bool _isOwner) public;\\n\\n  function removeDevice(address _device) public;\\n\\n  function executeTransaction(address payable _recipient, uint256 _value, bytes memory _data) public returns (bytes memory _response);\\n}\\n\",\"keccak256\":\"0xb35b2e0062a9305b14439db512f6d9d243e5d54c432d5136d080413bd0a19b45\"},\"src/account/AccountLibrary.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"./AbstractAccount.sol\\\";\\n\\n\\n/**\\n * @title Account Library\\n */\\nlibrary AccountLibrary {\\n\\n  using ECDSA for bytes32;\\n\\n  function isOwnerDevice(\\n    AbstractAccount _account,\\n    address _device\\n  ) internal view returns (bool) {\\n    bool isOwner;\\n    (isOwner,,) = _account.devices(_device);\\n    return isOwner;\\n  }\\n\\n  function isAnyDevice(\\n    AbstractAccount _account,\\n    address _device\\n  ) internal view returns (bool) {\\n    bool exists;\\n    (,exists,) = _account.devices(_device);\\n    return exists;\\n  }\\n\\n  function isExistedDevice(\\n    AbstractAccount _account,\\n    address _device\\n  ) internal view returns (bool) {\\n    bool existed;\\n    (,,existed) = _account.devices(_device);\\n    return existed;\\n  }\\n\\n  function verifyOwnerSignature(\\n    AbstractAccount _account,\\n    bytes32 _messageHash,\\n    bytes memory _signature\\n  ) internal view returns (bool _result) {\\n    address _recovered = _messageHash.recover(_signature);\\n\\n    if (_recovered != address(0)) {\\n      _result = isOwnerDevice(_account, _recovered);\\n    }\\n  }\\n\\n  function verifySignature(\\n    AbstractAccount _account,\\n    bytes32 _messageHash,\\n    bytes memory _signature,\\n    bool _strict\\n  ) internal view returns (bool _result) {\\n    address _recovered = _messageHash.recover(_signature);\\n\\n    if (_recovered != address(0)) {\\n      if (_strict) {\\n        _result = isAnyDevice(_account, _recovered);\\n      } else {\\n        _result = isExistedDevice(_account, _recovered);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x27bb32ce38d819d6e2c86a1f593e2e98855541eafac58c54ede6e6e4756826fa\"},\"src/account/AccountProviderV1.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"../contractCreator/ContractCreator.sol\\\";\\nimport \\\"../ens/ENSMultiManager.sol\\\";\\nimport \\\"../guardian/Guarded.sol\\\";\\nimport \\\"./AbstractAccount.sol\\\";\\nimport \\\"./AccountLibrary.sol\\\";\\n\\n\\n/**\\n * @title Account Provider V1\\n */\\ncontract AccountProviderV1 is ContractCreator, ENSMultiManager, Guarded {\\n\\n  using AccountLibrary for address;\\n  using ECDSA for bytes32;\\n  using SafeMath for uint256;\\n\\n  event AccountCreated(address account);\\n  event AccountEnsNameUpdated(address account);\\n\\n  bytes1 constant ACCOUNT_SALT_MSG_PREFIX = 0x01;\\n  bytes1 constant ACCOUNT_SALT_MSG_PREFIX_UNSAFE = 0x02;\\n  string constant ERR_INVALID_SIGNATURE = \\\"Invalid signature\\\";\\n\\n  address private accountProxy;\\n\\n  constructor(\\n    address _guardian,\\n    bytes memory _accountContractCode,\\n    address _accountProxy,\\n    address _ens\\n  ) ContractCreator(_accountContractCode) ENSMultiManager(_ens) Guarded(_guardian) public {\\n    accountProxy = _accountProxy;\\n  }\\n\\n  function updateAccountEnsName(\\n    bytes32 _ensLabel,\\n    bytes32 _ensNode,\\n    bytes  memory _guardianSignature\\n  ) public {\\n    bytes32 _messageHash = keccak256(\\n      abi.encodePacked(\\n        address(this),\\n        msg.sig,\\n        _ensLabel,\\n        _ensNode,\\n        msg.sender\\n      )\\n    ).toEthSignedMessageHash();\\n\\n    require(\\n      guardian.verifySignature(_messageHash, _guardianSignature, true),\\n      ERR_INVALID_SIGNATURE\\n    );\\n\\n    _register(\\n      _ensLabel,\\n      _ensNode,\\n      msg.sender\\n    );\\n\\n    emit AccountEnsNameUpdated(msg.sender);\\n  }\\n\\n  function createAccount(\\n    bytes32 _ensLabel,\\n    bytes32 _ensNode,\\n    uint256 _refundGas,\\n    bytes memory _signature\\n  ) onlyGuardian public {\\n    address _device = keccak256(\\n      abi.encodePacked(\\n        address(this),\\n        msg.sig,\\n        _ensLabel,\\n        _ensNode,\\n        _refundGas,\\n        tx.gasprice\\n      )\\n    ).toEthSignedMessageHash().recover(_signature);\\n\\n    bytes32 _salt = keccak256(abi.encodePacked(\\n        ACCOUNT_SALT_MSG_PREFIX,\\n        keccak256(abi.encodePacked(_device))\\n      ));\\n\\n    address _account = _createAccount(\\n      _salt,\\n      _device,\\n      _refundGas\\n    );\\n\\n    if (_ensLabel != 0) {\\n      _register(\\n        _ensLabel,\\n        _ensNode,\\n        _account\\n      );\\n    }\\n  }\\n\\n  function unsafeCreateAccount(\\n    uint256 _accountId,\\n    address _device,\\n    bytes32 _ensLabel,\\n    bytes32 _ensNode,\\n    uint256 _refundGas\\n  ) onlyGuardian public {\\n    bytes32 _salt = keccak256(\\n      abi.encodePacked(\\n        ACCOUNT_SALT_MSG_PREFIX_UNSAFE,\\n        _accountId\\n      )\\n    );\\n\\n    address _account = _createAccount(\\n      _salt,\\n      _device,\\n      _refundGas\\n    );\\n\\n    if (_ensLabel != 0) {\\n      _register(\\n        _ensLabel,\\n        _ensNode,\\n        _account\\n      );\\n    }\\n  }\\n\\n  function _createAccount(\\n    bytes32 _salt,\\n    address _device,\\n    uint256 _refundGas\\n  ) private returns (address) {\\n    // initialize account\\n    AbstractAccount _account = AbstractAccount(_createContract(_salt));\\n\\n    if (_refundGas > 0) {\\n      _account.executeTransaction(\\n        msg.sender,\\n        _refundGas.mul(tx.gasprice),\\n        new bytes(0)\\n      );\\n    }\\n\\n    _account.addDevice(_device, true);\\n    _account.addDevice(accountProxy, true);\\n    _account.removeDevice(address(this));\\n\\n    emit AccountCreated(address(_account));\\n\\n    return address(_account);\\n  }\\n}\\n\",\"keccak256\":\"0x4750acedc4f5ff15b4a0d5e06c6966a36e9fc72bacd0255e352a1035e700f8b2\"},\"src/account/ERC1271.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\ncontract ERC1271 {\\n\\n  // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n  bytes4 constant internal MAGICVALUE = 0x20c13b0b;\\n\\n  /**\\n   * @dev Should return whether the signature provided is valid for the provided data\\n   * @param _data Arbitrary length data signed on the behalf of address(this)\\n   * @param _signature Signature byte array associated with _data\\n   *\\n   * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n   * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n   * MUST allow external calls\\n   */\\n  function isValidSignature(\\n    bytes memory _data,\\n    bytes memory _signature\\n  ) public view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xa128c7faad858e42f18b7bd1e2d9bb0bd77ba1970d86133a05d4a0821394a906\"},\"src/contractCreator/ContractCreator.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\n/**\\n * @title Contract Creator\\n */\\ncontract ContractCreator {\\n\\n  bytes private contractCode;\\n  bytes32 private contractCodeHash;\\n\\n  constructor(bytes memory _contractCode) internal {\\n    contractCode = _contractCode;\\n    contractCodeHash = keccak256(_contractCode);\\n  }\\n\\n  function _createContract(bytes32 _salt) internal returns (address _contract) {\\n    bytes memory _contractCode = contractCode;\\n\\n    assembly {\\n      let p := add(_contractCode, 0x20)\\n      let n := mload(_contractCode)\\n      _contract := create2(0, p, n, _salt)\\n      if iszero(extcodesize(_contract)) {revert(0, 0)}\\n    }\\n  }\\n\\n  function _computeContractAddress(bytes32 _salt) internal view returns (address _contractAddress) {\\n    bytes32 _data = keccak256(\\n      abi.encodePacked(\\n        bytes1(0xff),\\n        address(this),\\n        _salt,\\n        contractCodeHash\\n      )\\n    );\\n\\n    _contractAddress = address(bytes20(_data << 96));\\n  }\\n}\\n\",\"keccak256\":\"0x468de4be26f95cf823e05efd02d49b8eba110918da7b4d90f2b628d4c6c30fb0\"},\"src/ens/AbstractENSAddrResolver.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\n/**\\n * @title Abstract ENS Addr Resolver\\n */\\ncontract AbstractENSAddrResolver {\\n\\n  event AddrChanged(bytes32 indexed node, address addr);\\n\\n  function addr(bytes32 _node) public view returns (address);\\n\\n  function setAddr(bytes32 _node, address _addr) public;\\n}\\n\",\"keccak256\":\"0xc6f2342977db99872388614048388d8137ac7302a9824d5bc8f877e1af63e29a\"},\"src/ens/ENSMultiManager.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"@ensdomains/ens/contracts/ENS.sol\\\";\\nimport \\\"./AbstractENSAddrResolver.sol\\\";\\n\\n\\n/**\\n * @title ENS Multi Manager\\n */\\ncontract ENSMultiManager is AbstractENSAddrResolver {\\n\\n  event EnsRootNodeAdded(bytes32 rootNode, address owner);\\n  event EnsRootNodeVerified(bytes32 rootNode);\\n  event EnsRootNodeReleased(bytes32 rootNode);\\n\\n  struct EnsRootNode {\\n    address owner;\\n    bool verified;\\n  }\\n\\n  string constant ERR_ONLY_NODE_OWNER = \\\"Sender is not ENS node owner\\\";\\n  string constant ERR_LABEL_ALREADY_TAKEN = \\\"ENS label already taken\\\";\\n  string constant ERR_ROOT_NODE_NOT_VERIFIED = \\\"ENS root node not verified\\\";\\n  string constant ERR_ROOT_NODE_DOESNT_EXIST = \\\"ENS root node doesn't exist\\\";\\n\\n  mapping(bytes32 => EnsRootNode) public ensRootNodes;\\n  mapping(bytes32 => address) private ensNodeAddresses;\\n\\n  ENS private ens;\\n\\n  constructor(address _ens) internal {\\n    ens = ENS(_ens);\\n  }\\n\\n  function addr(bytes32 _node) public view returns (address) {\\n    return ensNodeAddresses[_node];\\n  }\\n\\n  function setAddr(bytes32 _node, address _addr) public {\\n    require(\\n      ensNodeAddresses[_node] == msg.sender,\\n      ERR_ONLY_NODE_OWNER\\n    );\\n\\n    ensNodeAddresses[_node] = _addr;\\n\\n    emit AddrChanged(_node, _addr);\\n  }\\n\\n  function addEnsRootNode(bytes32 _rootNode) public {\\n    require(\\n      ens.owner(_rootNode) == msg.sender,\\n      ERR_ONLY_NODE_OWNER\\n    );\\n\\n    ensRootNodes[_rootNode].owner = msg.sender;\\n\\n    emit EnsRootNodeAdded(_rootNode, msg.sender);\\n  }\\n\\n  function verifyEnsRootNode(bytes32 _rootNode) public {\\n    require(\\n      ens.owner(_rootNode) == address(this),\\n      ERR_ROOT_NODE_NOT_VERIFIED\\n    );\\n\\n    ensRootNodes[_rootNode].verified = true;\\n\\n    emit EnsRootNodeVerified(_rootNode);\\n  }\\n\\n  function releaseEnsRootNode(bytes32 _rootNode) public {\\n    require(\\n      ensRootNodes[_rootNode].owner == msg.sender,\\n      ERR_ONLY_NODE_OWNER\\n    );\\n\\n    if (ensRootNodes[_rootNode].verified) {\\n      ens.setOwner(_rootNode, msg.sender);\\n    }\\n\\n    delete ensRootNodes[_rootNode];\\n\\n    emit EnsRootNodeReleased(_rootNode);\\n  }\\n\\n  function _register(bytes32 _label, bytes32 _rootNode, address _addr) internal {\\n    require(\\n      ensRootNodes[_rootNode].owner != address(0),\\n      ERR_ROOT_NODE_DOESNT_EXIST\\n    );\\n    require(\\n      ensRootNodes[_rootNode].verified,\\n      ERR_ROOT_NODE_NOT_VERIFIED\\n    );\\n\\n    bytes32 _node = keccak256(abi.encodePacked(_rootNode, _label));\\n\\n    require(\\n      ensNodeAddresses[_node] == address(0),\\n      ERR_LABEL_ALREADY_TAKEN\\n    );\\n\\n    ensNodeAddresses[_node] = _addr;\\n\\n    ens.setSubnodeOwner(_rootNode, _label, address(this));\\n    ens.setResolver(_node, address(this));\\n    ens.setOwner(_node, _addr);\\n  }\\n}\\n\",\"keccak256\":\"0x3dea7730174bf2601257c449df82b9f5a288b10c08283378bdc5722c42c5a088\"},\"src/guardian/Guarded.sol\":{\"content\":\"pragma solidity ^0.5.10;\\n\\nimport \\\"../account/AbstractAccount.sol\\\";\\nimport \\\"../account/AccountLibrary.sol\\\";\\n\\n\\n/**\\n * @title Guarded\\n */\\ncontract Guarded {\\n\\n  using AccountLibrary for AbstractAccount;\\n\\n  string constant ERR_ONLY_GUARDIAN = \\\"Sender is not a guardian or guardian device\\\";\\n\\n  AbstractAccount public guardian;\\n\\n  modifier onlyGuardian() {\\n    require(\\n      (\\n      address(guardian) == msg.sender ||\\n      guardian.isAnyDevice(msg.sender)\\n      ),\\n      ERR_ONLY_GUARDIAN\\n    );\\n\\n    _;\\n  }\\n\\n  constructor(address _guardian) internal {\\n    guardian = AbstractAccount(_guardian);\\n  }\\n}\\n\",\"keccak256\":\"0xd6ad7c62b0a16ae2fcdbe78571b145c2fb09279700f661178e94fed7420b2635\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620029c1380380620029c1833981810160405260808110156200003757600080fd5b8101908080519060200190929190805160405193929190846401000000008211156200006257600080fd5b838201915060208201858111156200007957600080fd5b82518660018202830111640100000000821117156200009757600080fd5b8083526020830192505050908051906020019080838360005b83811015620000cd578082015181840152602081019050620000b0565b50505050905090810190601f168015620000fb5780820380516001836020036101000a031916815260200191505b50604052602001805190602001909291908051906020019092919050505083818480600090805190602001906200013492919062000213565b5080805190602001206001819055505080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620002c2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025657805160ff191683800117855562000287565b8280016001018555821562000287579182015b828111156200028657825182559160200191906001019062000269565b5b5090506200029691906200029a565b5090565b620002bf91905b80821115620002bb576000816000905550600101620002a1565b5090565b90565b6126ef80620002d26000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80635acb1c1b116100665780635acb1c1b146102235780637ff4dfd0146102f2578063bb223ce41461036b578063c6147fc814610399578063d5fa2b00146104725761009e565b806304aa74cb146100a3578063188b954f146100d15780633b3b57de1461013d578063416ae7ff146101ab578063452a9320146101d9575b600080fd5b6100cf600480360360208110156100b957600080fd5b81019080803590602001909291905050506104c0565b005b61013b600480360360a08110156100e757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506106e2565b005b6101696004803603602081101561015357600080fd5b81019080803590602001909291905050506108ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101d7600480360360208110156101c157600080fd5b810190808035906020019092919050505061092b565b005b6101e1610ba7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102f06004803603606081101561023957600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561026a57600080fd5b82018360208201111561027c57600080fd5b8035906020019184600183028401116401000000008311171561029e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610bcd565b005b61031e6004803603602081101561030857600080fd5b8101908080359060200190929190505050610e81565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390f35b6103976004803603602081101561038157600080fd5b8101908080359060200190929190505050610ed2565b005b610470600480360360808110156103af57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803590602001906401000000008111156103ea57600080fd5b8201836020820111156103fc57600080fd5b8035906020019184600183028401116401000000008311171561041e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061118a565b005b6104be6004803603604081101561048857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e9565b005b3073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561054a57600080fd5b505afa15801561055e573d6000803e3d6000fd5b505050506040513d602081101561057457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280601a81526020017f454e5320726f6f74206e6f6465206e6f7420766572696669656400000000000081525090610678576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561063d578082015181840152602081019050610622565b50505050905090810190601f16801561066a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060016002600083815260200190815260200160002060000160146101000a81548160ff0219169083151502179055507f3c1e12021a68eb78df268e4fed874721bb38a7b278d9029db9a7b2056592baf2816040518082815260200191505060405180910390a150565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610785575061078433600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116e290919063ffffffff16565b5b6040518060600160405280602b8152602001612690602b913990610844576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108095780820151818401526020810190506107ee565b50505050905090810190601f1680156108365780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000600260f81b8660405160200180837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526001018281526020019250505060405160208183030381529060405280519060200120905060006108cd8287856117c3565b90506000801b85146108e5576108e4858583611c7e565b5b50505050505050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156109b557600080fd5b505afa1580156109c9573d6000803e3d6000fd5b505050506040513d60208110156109df57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280601c81526020017f53656e646572206973206e6f7420454e53206e6f6465206f776e65720000000081525090610ae3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610aa8578082015181840152602081019050610a8d565b50505050905090810190601f168015610ad55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50336002600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f44a96c3928a5c6ba670970f10868d09235a6b7a5770c2ebbf244e2228e546f5c8133604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610cde306000357fffffffff0000000000000000000000000000000000000000000000000000000016868633604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140195505050505050604051602081830303815290604052805190602001206122fd565b9050610d3081836001600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612355909392919063ffffffff16565b6040518060400160405280601181526020017f496e76616c6964207369676e617475726500000000000000000000000000000081525090610e0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610dd1578082015181840152602081019050610db6565b50505050905090810190601f168015610dfe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610e18848433611c7e565b7f7eaf47b80dadd049c59d75e4fea0cff3ac993d779967e004590899fb0ce321f633604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150505050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b3373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280601c81526020017f53656e646572206973206e6f7420454e53206e6f6465206f776e65720000000081525090611013576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610fd8578082015181840152602081019050610fbd565b50505050905090810190601f1680156110055780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506002600082815260200190815260200160002060000160149054906101000a900460ff16156110ff57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156110e657600080fd5b505af11580156110fa573d6000803e3d6000fd5b505050505b60026000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff021916905550507fc98be4d6a6f25550c39fb4e66d7ecd9ed01b3a569eff063b00e6608270d31f3d816040518082815260200191505060405180910390a150565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061122d575061122c33600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116e290919063ffffffff16565b5b6040518060600160405280602b8152602001612690602b9139906112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156112b1578082015181840152602081019050611296565b50505050905090810190601f1680156112de5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006113e9826113db306000357fffffffff00000000000000000000000000000000000000000000000000000000168989893a604051602001808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004018581526020018481526020018381526020018281526020019650505050505050604051602081830303815290604052805190602001206122fd565b6123cf90919063ffffffff16565b90506000600160f81b82604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014019150506040516020818303038152906040528051906020012060405160200180837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526001018281526020019250505060405160208183030381529060405280519060200120905060006114c88284876117c3565b90506000801b87146114e0576114df878783611c7e565b5b50505050505050565b3373ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280601c81526020017f53656e646572206973206e6f7420454e53206e6f6465206f776e65720000000081525090611627576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115ec5780820151818401526020810190506115d1565b50505050905090810190601f1680156116195780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd282604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a25050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e7b4cac6846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060606040518083038186803b15801561176257600080fd5b505afa158015611776573d6000803e3d6000fd5b505050506040513d606081101561178c57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505090915050809150508091505092915050565b6000806117cf856124b1565b90506000831115611a0f578073ffffffffffffffffffffffffffffffffffffffff16633f579f423361180a3a8761257390919063ffffffff16565b60006040519080825280601f01601f19166020018201604052801561183e5781602001600182028038833980820191505090505b506040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156118c65780820151818401526020810190506118ab565b50505050905090810190601f1680156118f35780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561191457600080fd5b505af1158015611928573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561195257600080fd5b810190808051604051939291908464010000000082111561197257600080fd5b8382019150602082018581111561198857600080fd5b82518660018202830111640100000000821117156119a557600080fd5b8083526020830192505050908051906020019080838360005b838110156119d95780820151818401526020810190506119be565b50505050905090810190601f168015611a065780820380516001836020036101000a031916815260200191505b50604052505050505b8073ffffffffffffffffffffffffffffffffffffffff1663811d54dc8560016040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b158015611a9b57600080fd5b505af1158015611aaf573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663811d54dc600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b158015611b6157600080fd5b505af1158015611b75573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631f7b6324306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611bf857600080fd5b505af1158015611c0c573d6000803e3d6000fd5b505050507f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa281604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280601b81526020017f454e5320726f6f74206e6f646520646f65736e2774206578697374000000000081525090611dc1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611d86578082015181840152602081019050611d6b565b50505050905090810190601f168015611db35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506002600083815260200190815260200160002060000160149054906101000a900460ff166040518060400160405280601a81526020017f454e5320726f6f74206e6f6465206e6f7420766572696669656400000000000081525090611ec2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e87578082015181840152602081019050611e6c565b50505050905090810190601f168015611eb45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600082846040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280601781526020017f454e53206c6162656c20616c72656164792074616b656e00000000000000000081525090612035576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ffa578082015181840152602081019050611fdf565b50505050905090810190601f1680156120275780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59238486306040518463ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561213957600080fd5b505af115801561214d573d6000803e3d6000fd5b505050506040513d602081101561216357600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a82306040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561221e57600080fd5b505af1158015612232573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156122df57600080fd5b505af11580156122f3573d6000803e3d6000fd5b5050505050505050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050919050565b60008061236b84866123cf90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146123c65782156123b8576123b186826116e2565b91506123c5565b6123c286826125ad565b91505b5b50949350505050565b60008060008060418551146123ea57600093505050506124ab565b6020850151925060408501519150606085015160001a9050601b8160ff16101561241557601b810190505b601b8160ff161415801561242d5750601c8160ff1614155b1561243e57600093505050506124ab565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561249b573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6000606060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561254b5780601f106125205761010080835404028352916020019161254b565b820191906000526020600020905b81548152906001019060200180831161252e57829003601f168201915b505050505090506020810181518481836000f59350833b61256b57600080fd5b505050919050565b60008083141561258657600090506125a7565b600082840290508284828161259757fe5b04146125a257600080fd5b809150505b92915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e7b4cac6846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060606040518083038186803b15801561262d57600080fd5b505afa158015612641573d6000803e3d6000fd5b505050506040513d606081101561265757600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050909150905080915050809150509291505056fe53656e646572206973206e6f74206120677561726469616e206f7220677561726469616e20646576696365a265627a7a723158204e1a7dea1f2e0da7af88c877594479753ddbe4c569adfb6dcc3e917a7989ed8564736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80635acb1c1b116100665780635acb1c1b146102235780637ff4dfd0146102f2578063bb223ce41461036b578063c6147fc814610399578063d5fa2b00146104725761009e565b806304aa74cb146100a3578063188b954f146100d15780633b3b57de1461013d578063416ae7ff146101ab578063452a9320146101d9575b600080fd5b6100cf600480360360208110156100b957600080fd5b81019080803590602001909291905050506104c0565b005b61013b600480360360a08110156100e757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506106e2565b005b6101696004803603602081101561015357600080fd5b81019080803590602001909291905050506108ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101d7600480360360208110156101c157600080fd5b810190808035906020019092919050505061092b565b005b6101e1610ba7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102f06004803603606081101561023957600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561026a57600080fd5b82018360208201111561027c57600080fd5b8035906020019184600183028401116401000000008311171561029e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610bcd565b005b61031e6004803603602081101561030857600080fd5b8101908080359060200190929190505050610e81565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390f35b6103976004803603602081101561038157600080fd5b8101908080359060200190929190505050610ed2565b005b610470600480360360808110156103af57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803590602001906401000000008111156103ea57600080fd5b8201836020820111156103fc57600080fd5b8035906020019184600183028401116401000000008311171561041e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061118a565b005b6104be6004803603604081101561048857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e9565b005b3073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561054a57600080fd5b505afa15801561055e573d6000803e3d6000fd5b505050506040513d602081101561057457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280601a81526020017f454e5320726f6f74206e6f6465206e6f7420766572696669656400000000000081525090610678576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561063d578082015181840152602081019050610622565b50505050905090810190601f16801561066a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060016002600083815260200190815260200160002060000160146101000a81548160ff0219169083151502179055507f3c1e12021a68eb78df268e4fed874721bb38a7b278d9029db9a7b2056592baf2816040518082815260200191505060405180910390a150565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610785575061078433600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116e290919063ffffffff16565b5b6040518060600160405280602b8152602001612690602b913990610844576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108095780820151818401526020810190506107ee565b50505050905090810190601f1680156108365780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000600260f81b8660405160200180837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526001018281526020019250505060405160208183030381529060405280519060200120905060006108cd8287856117c3565b90506000801b85146108e5576108e4858583611c7e565b5b50505050505050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156109b557600080fd5b505afa1580156109c9573d6000803e3d6000fd5b505050506040513d60208110156109df57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280601c81526020017f53656e646572206973206e6f7420454e53206e6f6465206f776e65720000000081525090610ae3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610aa8578082015181840152602081019050610a8d565b50505050905090810190601f168015610ad55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50336002600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f44a96c3928a5c6ba670970f10868d09235a6b7a5770c2ebbf244e2228e546f5c8133604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610cde306000357fffffffff0000000000000000000000000000000000000000000000000000000016868633604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140195505050505050604051602081830303815290604052805190602001206122fd565b9050610d3081836001600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612355909392919063ffffffff16565b6040518060400160405280601181526020017f496e76616c6964207369676e617475726500000000000000000000000000000081525090610e0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610dd1578082015181840152602081019050610db6565b50505050905090810190601f168015610dfe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610e18848433611c7e565b7f7eaf47b80dadd049c59d75e4fea0cff3ac993d779967e004590899fb0ce321f633604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150505050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b3373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280601c81526020017f53656e646572206973206e6f7420454e53206e6f6465206f776e65720000000081525090611013576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610fd8578082015181840152602081019050610fbd565b50505050905090810190601f1680156110055780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506002600082815260200190815260200160002060000160149054906101000a900460ff16156110ff57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382336040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156110e657600080fd5b505af11580156110fa573d6000803e3d6000fd5b505050505b60026000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff021916905550507fc98be4d6a6f25550c39fb4e66d7ecd9ed01b3a569eff063b00e6608270d31f3d816040518082815260200191505060405180910390a150565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061122d575061122c33600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116e290919063ffffffff16565b5b6040518060600160405280602b8152602001612690602b9139906112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156112b1578082015181840152602081019050611296565b50505050905090810190601f1680156112de5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006113e9826113db306000357fffffffff00000000000000000000000000000000000000000000000000000000168989893a604051602001808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526004018581526020018481526020018381526020018281526020019650505050505050604051602081830303815290604052805190602001206122fd565b6123cf90919063ffffffff16565b90506000600160f81b82604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014019150506040516020818303038152906040528051906020012060405160200180837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526001018281526020019250505060405160208183030381529060405280519060200120905060006114c88284876117c3565b90506000801b87146114e0576114df878783611c7e565b5b50505050505050565b3373ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280601c81526020017f53656e646572206973206e6f7420454e53206e6f6465206f776e65720000000081525090611627576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115ec5780820151818401526020810190506115d1565b50505050905090810190601f1680156116195780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50806003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd282604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a25050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e7b4cac6846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060606040518083038186803b15801561176257600080fd5b505afa158015611776573d6000803e3d6000fd5b505050506040513d606081101561178c57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505090915050809150508091505092915050565b6000806117cf856124b1565b90506000831115611a0f578073ffffffffffffffffffffffffffffffffffffffff16633f579f423361180a3a8761257390919063ffffffff16565b60006040519080825280601f01601f19166020018201604052801561183e5781602001600182028038833980820191505090505b506040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156118c65780820151818401526020810190506118ab565b50505050905090810190601f1680156118f35780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561191457600080fd5b505af1158015611928573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561195257600080fd5b810190808051604051939291908464010000000082111561197257600080fd5b8382019150602082018581111561198857600080fd5b82518660018202830111640100000000821117156119a557600080fd5b8083526020830192505050908051906020019080838360005b838110156119d95780820151818401526020810190506119be565b50505050905090810190601f168015611a065780820380516001836020036101000a031916815260200191505b50604052505050505b8073ffffffffffffffffffffffffffffffffffffffff1663811d54dc8560016040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b158015611a9b57600080fd5b505af1158015611aaf573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663811d54dc600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200192505050600060405180830381600087803b158015611b6157600080fd5b505af1158015611b75573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631f7b6324306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611bf857600080fd5b505af1158015611c0c573d6000803e3d6000fd5b505050507f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa281604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280601b81526020017f454e5320726f6f74206e6f646520646f65736e2774206578697374000000000081525090611dc1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611d86578082015181840152602081019050611d6b565b50505050905090810190601f168015611db35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506002600083815260200190815260200160002060000160149054906101000a900460ff166040518060400160405280601a81526020017f454e5320726f6f74206e6f6465206e6f7420766572696669656400000000000081525090611ec2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e87578082015181840152602081019050611e6c565b50505050905090810190601f168015611eb45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600082846040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280601781526020017f454e53206c6162656c20616c72656164792074616b656e00000000000000000081525090612035576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ffa578082015181840152602081019050611fdf565b50505050905090810190601f1680156120275780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59238486306040518463ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561213957600080fd5b505af115801561214d573d6000803e3d6000fd5b505050506040513d602081101561216357600080fd5b810190808051906020019092919050505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a82306040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561221e57600080fd5b505af1158015612232573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156122df57600080fd5b505af11580156122f3573d6000803e3d6000fd5b5050505050505050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050919050565b60008061236b84866123cf90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146123c65782156123b8576123b186826116e2565b91506123c5565b6123c286826125ad565b91505b5b50949350505050565b60008060008060418551146123ea57600093505050506124ab565b6020850151925060408501519150606085015160001a9050601b8160ff16101561241557601b810190505b601b8160ff161415801561242d5750601c8160ff1614155b1561243e57600093505050506124ab565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561249b573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6000606060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561254b5780601f106125205761010080835404028352916020019161254b565b820191906000526020600020905b81548152906001019060200180831161252e57829003601f168201915b505050505090506020810181518481836000f59350833b61256b57600080fd5b505050919050565b60008083141561258657600090506125a7565b600082840290508284828161259757fe5b04146125a257600080fd5b809150505b92915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e7b4cac6846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060606040518083038186803b15801561262d57600080fd5b505afa158015612641573d6000803e3d6000fd5b505050506040513d606081101561265757600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050909150905080915050809150509291505056fe53656e646572206973206e6f74206120677561726469616e206f7220677561726469616e20646576696365a265627a7a723158204e1a7dea1f2e0da7af88c877594479753ddbe4c569adfb6dcc3e917a7989ed8564736f6c63430005110032",
  "devdoc": {
    "methods": {},
    "title": "Account Provider V1"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3958,
        "contract": "src/account/AccountProviderV1.sol:AccountProviderV1",
        "label": "contractCode",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes_storage"
      },
      {
        "astId": 3960,
        "contract": "src/account/AccountProviderV1.sol:AccountProviderV1",
        "label": "contractCodeHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 4088,
        "contract": "src/account/AccountProviderV1.sol:AccountProviderV1",
        "label": "ensRootNodes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(EnsRootNode)4072_storage)"
      },
      {
        "astId": 4092,
        "contract": "src/account/AccountProviderV1.sol:AccountProviderV1",
        "label": "ensNodeAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4094,
        "contract": "src/account/AccountProviderV1.sol:AccountProviderV1",
        "label": "ens",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ENS)136"
      },
      {
        "astId": 4420,
        "contract": "src/account/AccountProviderV1.sol:AccountProviderV1",
        "label": "guardian",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AbstractAccount)1307"
      },
      {
        "astId": 2272,
        "contract": "src/account/AccountProviderV1.sol:AccountProviderV1",
        "label": "accountProxy",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(AbstractAccount)1307": {
        "encoding": "inplace",
        "label": "contract AbstractAccount",
        "numberOfBytes": "20"
      },
      "t_contract(ENS)136": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(EnsRootNode)4072_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ENSMultiManager.EnsRootNode)",
        "numberOfBytes": "32",
        "value": "t_struct(EnsRootNode)4072_storage"
      },
      "t_struct(EnsRootNode)4072_storage": {
        "encoding": "inplace",
        "label": "struct ENSMultiManager.EnsRootNode",
        "members": [
          {
            "astId": 4069,
            "contract": "src/account/AccountProviderV1.sol:AccountProviderV1",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4071,
            "contract": "src/account/AccountProviderV1.sol:AccountProviderV1",
            "label": "verified",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      }
    }
  }
}